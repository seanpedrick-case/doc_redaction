[
  {
    "objectID": "src/user_guide.html",
    "href": "src/user_guide.html",
    "title": "User guide",
    "section": "",
    "text": "Example data files\nBasic redaction\nCustomising redaction options\n\nCustom allow, deny, and page redaction lists\n\nAllow list example\nDeny list example\nFull page redaction list example\n\nRedacting additional types of personal information\nRedacting only specific pages\nHandwriting and signature redaction\n\nReviewing and modifying suggested redactions\nRedacting tabular data files (CSV/XLSX) or copy and pasted text\n\nSee the advanced user guide here: - Merging redaction review files - Identifying and redacting duplicate pages - Fuzzy search and redaction - Export redactions to and import from Adobe Acrobat - Exporting to Adobe Acrobat - Importing from Adobe Acrobat - Using the AWS Textract document API - Using AWS Textract and Comprehend when not running in an AWS environment - Modifying existing redaction review files"
  },
  {
    "objectID": "src/user_guide.html#table-of-contents",
    "href": "src/user_guide.html#table-of-contents",
    "title": "User guide",
    "section": "",
    "text": "Example data files\nBasic redaction\nCustomising redaction options\n\nCustom allow, deny, and page redaction lists\n\nAllow list example\nDeny list example\nFull page redaction list example\n\nRedacting additional types of personal information\nRedacting only specific pages\nHandwriting and signature redaction\n\nReviewing and modifying suggested redactions\nRedacting tabular data files (CSV/XLSX) or copy and pasted text\n\nSee the advanced user guide here: - Merging redaction review files - Identifying and redacting duplicate pages - Fuzzy search and redaction - Export redactions to and import from Adobe Acrobat - Exporting to Adobe Acrobat - Importing from Adobe Acrobat - Using the AWS Textract document API - Using AWS Textract and Comprehend when not running in an AWS environment - Modifying existing redaction review files"
  },
  {
    "objectID": "src/user_guide.html#example-data-files",
    "href": "src/user_guide.html#example-data-files",
    "title": "User guide",
    "section": "Example data files",
    "text": "Example data files\nPlease try these example files to follow along with this guide: - Example of files sent to a professor before applying - Example complaint letter (jpg) - Partnership Agreement Toolkit (for signatures and more advanced usage) - Dummy case note data"
  },
  {
    "objectID": "src/user_guide.html#basic-redaction",
    "href": "src/user_guide.html#basic-redaction",
    "title": "User guide",
    "section": "Basic redaction",
    "text": "Basic redaction\nThe document redaction app can detect personally-identifiable information (PII) in documents. Documents can be redacted directly, or suggested redactions can be reviewed and modified using a grapical user interface. Basic document redaction can be performed quickly using the default options.\nDownload the example PDFs above to your computer. Open up the redaction app with the link provided by email.\n\n\n\nUpload files\n\n\n\nUpload files to the app\nThe ‘Redact PDFs/images tab’ currently accepts PDFs and image files (JPG, PNG) for redaction. Click on the ‘Drop files here or Click to Upload’ area of the screen, and select one of the three different example files (they should all be stored in the same folder if you want them to be redacted at the same time).\n\n\nText extraction\nFirst, select one of the three text extraction options: - ‘Local model - selectable text’ - This will read text directly from PDFs that have selectable text to redact (using PikePDF). This is fine for most PDFs, but will find nothing if the PDF does not have selectable text, and it is not good for handwriting or signatures. If it encounters an image file, it will send it onto the second option below. - ‘Local OCR model - PDFs without selectable text’ - This option will use a simple Optical Character Recognition (OCR) model (Tesseract) to pull out text from a PDF/image that it ‘sees’. This can handle most typed text in PDFs/images without selectable text, but struggles with handwriting/signatures. If you are interested in the latter, then you should use the third option if available. - ‘AWS Textract service - all PDF types’ - Only available for instances of the app running on AWS. AWS Textract is a service that performs OCR on documents within their secure service. This is a more advanced version of OCR compared to the local option, and carries a (relatively small) cost. Textract excels in complex documents based on images, or documents that contain a lot of handwriting and signatures.\n\n\nOptional - select signature extraction\nIf you chose the AWS Textract service above, you can choose if you want handwriting and/or signatures redacted by default. Choosing signatures here will have a cost implication, as identifying signatures will cost ~£2.66 ($3.50) per 1,000 pages vs ~£1.14 ($1.50) per 1,000 pages without signature detection.\n\n\n\nAWS Textract handwriting and signature options\n\n\n\n\nPII redaction method\nIf you are running with the AWS service enabled, here you will also have a choice for PII redaction method: - ‘Only extract text - (no redaction)’ - If you are only interested in getting the text out of the document for further processing (e.g. to find duplicate pages, or to review text on the Review redactions page) - ‘Local’ - This uses the spacy package to rapidly detect PII in extracted text. This method is often sufficient if you are just interested in redacting specific terms defined in a custom list. - ‘AWS Comprehend’ - This method calls an AWS service to provide more accurate identification of PII in extracted text.\n\n\nOptional - costs and time estimation\nIf the option is enabled (by your system admin, in the config file), you will see a cost and time estimate for the redaction process. ‘Existing Textract output file found’ will be checked automatically if previous Textract text extraction files exist in the output folder, or have been previously uploaded by the user (saving time and money for redaction).\n\n\n\nCost and time estimation\n\n\n\n\nOptional - cost code selection\nIf the option is enabled (by your system admin, in the config file), you may be prompted to select a cost code before continuing with the redaction task.\n\n\n\nCost code selection\n\n\nThe relevant cost code can be found either by: 1. Using the search bar above the data table to find relevant cost codes, then clicking on the relevant row, or 2. typing it directly into the dropdown to the right, where it should filter as you type.\n\n\nOptional - Submit whole documents to Textract API\nIf this option is enabled (by your system admin, in the config file), you will have the option to submit whole documents in quick succession to the AWS Textract service to get extracted text outputs quickly (faster than using the ‘Redact document’ process described here). This feature is described in more detail in the advanced user guide.\n\n\n\nTextract document API\n\n\n\n\nRedact the document\nClick ‘Redact document’. After loading in the document, the app should be able to process about 30 pages per minute (depending on redaction methods chose above). When ready, you should see a message saying that processing is complete, with output files appearing in the bottom right.\n\n\nRedaction outputs\n\n\n\nRedaction outputs\n\n\n\n‘…redacted.pdf’ files contain the original pdf with suggested redacted text deleted and replaced by a black box on top of the document.\n‘…ocr_results.csv’ files contain the line-by-line text outputs from the entire document. This file can be useful for later searching through for any terms of interest in the document (e.g. using Excel or a similar program).\n‘…review_file.csv’ files are the review files that contain details and locations of all of the suggested redactions in the document. This file is key to the review process, and should be downloaded to use later for this.\n\n\n\nAdditional AWS Textract / local OCR outputs\nIf you have used the AWS Textract option for extracting text, you may also see a ’…_textract.json’ file. This file contains all the relevant extracted text information that comes from the AWS Textract service. You can keep this file and upload it at a later date alongside your input document, which will enable you to skip calling AWS Textract every single time you want to do a redaction task, as follows:\n\n\n\nDocument upload alongside Textract\n\n\nSimilarly, if you have used the ‘Local OCR method’ to extract text, you may see a ’…_ocr_results_with_words.json’ file. This file works in the same way as the AWS Textract .json results described above, and can be uploaded alongside an input document to save time on text extraction in future in the same way.\n\n\nDownloading output files from previous redaction tasks\nIf you are logged in via AWS Cognito and you lose your app page for some reason (e.g. from a crash, reloading), it is possible recover your previous output files, provided the server has not been shut down since you redacted the document. Go to ‘Redaction settings’, then scroll to the bottom to see ‘View all output files from this session’.\n\n\n\nView all output files\n\n\n\n\nBasic redaction summary\nWe have covered redacting documents with the default redaction options. The ‘…redacted.pdf’ file output may be enough for your purposes. But it is very likely that you will need to customise your redaction options, which we will cover below."
  },
  {
    "objectID": "src/user_guide.html#customising-redaction-options",
    "href": "src/user_guide.html#customising-redaction-options",
    "title": "User guide",
    "section": "Customising redaction options",
    "text": "Customising redaction options\nOn the ‘Redaction settings’ page, there are a number of options that you can tweak to better match your use case and needs.\n\nCustom allow, deny, and page redaction lists\nThe app allows you to specify terms that should never be redacted (an allow list), terms that should always be redacted (a deny list), and also to provide a list of page numbers for pages that should be fully redacted.\n\n\n\nCustom allow, deny, and page redaction lists\n\n\n\nAllow list example\nIt may be the case that specific terms that are frequently redacted are not interesting to\nIn the redacted outputs of the ‘Example of files sent to a professor before applying’ PDF, you can see that it is frequently redacting references to Dr Hyde’s lab in the main body of the text. Let’s say that references to Dr Hyde were not considered personal information in this context. You can exclude this term from redaction (and others) by providing an ‘allow list’ file. This is simply a csv that contains the case sensitive terms to exclude in the first column, in our example, ‘Hyde’ and ‘Muller glia’. The example file is provided here.\nTo import this to use with your redaction tasks, go to the ‘Redaction settings’ tab, click on the ‘Import allow list file’ button halfway down, and select the csv file you have created. It should be loaded for next time you hit the redact button. Go back to the first tab and do this.\n\n\nDeny list example\nSay you wanted to remove specific terms from a document. In this app you can do this by providing a custom deny list as a csv. Like for the allow list described above, this should be a one-column csv without a column header. The app will suggest each individual term in the list with exact spelling as whole words. So it won’t select text from within words. To enable this feature, the ‘CUSTOM’ tag needs to be chosen as a redaction entity (the process for adding/removing entity types to redact is described below).\nHere is an example using the Partnership Agreement Toolkit file. This is an example of a custom deny list file. ‘Sister’, ‘Sister City’ ‘Sister Cities’, ‘Friendship City’ have been listed as specific terms to redact. You can see the outputs of this redaction process on the review page:\n.\nYou can see that the app has highlighted all instances of these terms on the page shown. You can then consider each of these terms for modification or removal on the review page explained here.\n\n\nFull page redaction list example\nThere may be full pages in a document that you want to redact. The app also provides the capability of redacting pages completely based on a list of input page numbers in a csv. The format of the input file is the same as that for the allow and deny lists described above - a one-column csv without a column header. An example of this is here. You can see an example of the redacted page on the review page:\n.\nUsing the above approaches to allow, deny, and full page redaction lists will give you an output like this.\n\n\nAdding to the loaded allow, deny, and whole page lists in-app\nIf you open the accordion below the allow list options called ‘Manually modify custom allow…’, you should be able to see a few tables with options to add new rows:\n\n\n\nManually modify allow or deny list\n\n\nIf the table is empty, you can add a new entry, you can add a new row by clicking on the ‘+’ item below each table header. If there is existing data, you may need to click on the three dots to the right and select ‘Add row below’. Type the item you wish to keep/remove in the cell, and then (important) press enter to add this new item to the allow/deny/whole page list. Your output tables should look something like below.\n\n\n\nManually modify allow or deny list filled\n\n\nNote: As of version 0.7.0 you can now apply your whole page redaction list directly to the document file currently under review by clicking the ‘Apply whole page redaction list to document currently under review’ button that appears here.\n\n\n\nRedacting additional types of personal information\nYou may want to redact additional types of information beyond the defaults, or you may not be interested in default suggested entity types. There are dates in the example complaint letter. Say we wanted to redact those dates also?\nUnder the ‘Redaction settings’ tab, go to ‘Entities to redact (click close to down arrow for full list)’. Different dropdowns are provided according to whether you are using the Local service to redact PII, or the AWS Comprehend service. Click within the empty box close to the dropdown arrow and you should see a list of possible ‘entities’ to redact. Select ‘DATE_TIME’ and it should appear in the main list. To remove items, click on the ‘x’ next to their name.\n\n\n\nRedacting additional types of information dropdown\n\n\nNow, go back to the main screen and click ‘Redact Document’ again. You should now get a redacted version of ‘Example complaint letter’ that has the dates and times removed.\nIf you want to redact different files, I suggest you refresh your browser page to start a new session and unload all previous data."
  },
  {
    "objectID": "src/user_guide.html#redacting-only-specific-pages",
    "href": "src/user_guide.html#redacting-only-specific-pages",
    "title": "User guide",
    "section": "Redacting only specific pages",
    "text": "Redacting only specific pages\nSay also we are only interested in redacting page 1 of the loaded documents. On the Redaction settings tab, select ‘Lowest page to redact’ as 1, and ‘Highest page to redact’ also as 1. When you next redact your documents, only the first page will be modified.\n\n\n\nSelecting specific pages to redact"
  },
  {
    "objectID": "src/user_guide.html#handwriting-and-signature-redaction",
    "href": "src/user_guide.html#handwriting-and-signature-redaction",
    "title": "User guide",
    "section": "Handwriting and signature redaction",
    "text": "Handwriting and signature redaction\nThe file Partnership Agreement Toolkit (for signatures and more advanced usage) is provided as an example document to test AWS Textract + redaction with a document that has signatures in. If you have access to AWS Textract in the app, try removing all entity types from redaction on the Redaction settings and clicking the big X to the right of ‘Entities to redact’.\nTo ensure that handwriting and signatures are enabled (enabled by default), on the front screen go the ‘AWS Textract signature detection’ to enable/disable the following options :\n\n\n\nHandwriting and signatures\n\n\nThe outputs should show handwriting/signatures redacted (see pages 5 - 7), which you can inspect and modify on the ‘Review redactions’ tab.\n\n\n\nHandwriting and signatures redacted example"
  },
  {
    "objectID": "src/user_guide.html#reviewing-and-modifying-suggested-redactions",
    "href": "src/user_guide.html#reviewing-and-modifying-suggested-redactions",
    "title": "User guide",
    "section": "Reviewing and modifying suggested redactions",
    "text": "Reviewing and modifying suggested redactions\nSometimes the app will suggest redactions that are incorrect, or will miss personal information entirely. The app allows you to review and modify suggested redactions to compensate for this. You can do this on the ‘Review redactions’ tab.\nWe will go through ways to review suggested redactions with an example.On the first tab ‘PDFs/images’ upload the ‘Example of files sent to a professor before applying.pdf’ file. Let’s stick with the ‘Local model - selectable text’ option, and click ‘Redact document’. Once the outputs are created, go to the ‘Review redactions’ tab.\nOn the ‘Review redactions’ tab you have a visual interface that allows you to inspect and modify redactions suggested by the app. There are quite a few options to look at, so we’ll go from top to bottom.\n\n\n\nReview redactions\n\n\n\nUploading documents for review\nThe top area has a file upload area where you can upload original, unredacted PDFs, alongside the ’…_review_file.csv’ that is produced by the redaction process. Once you have uploaded these two files, click the ‘Review redactions based on original PDF…’ button to load in the files for review. This will allow you to visualise and modify the suggested redactions using the interface below.\nOptionally, you can also upload one of the ’…_ocr_output.csv’ files here that comes out of a redaction task, so that you can navigate the extracted text from the document.\n\n\n\nSearch extracted text\n\n\nYou can upload the three review files in the box (unredacted document, ’…_review_file.csv’ and ’…_ocr_output.csv’ file) before clicking ‘Review redactions based on original PDF…’, as in the image below:\n\n\n\nUpload three files for review\n\n\nNOTE: ensure you upload the unredacted document here and not the redacted version, otherwise you will be checking over a document that already has redaction boxes applied!\n\n\nPage navigation\nYou can change the page viewed either by clicking ‘Previous page’ or ‘Next page’, or by typing a specific page number in the ‘Current page’ box and pressing Enter on your keyboard. Each time you switch page, it will save redactions you have made on the page you are moving from, so you will not lose changes you have made.\nYou can also navigate to different pages by clicking on rows in the tables under ‘Search suggested redactions’ to the right, or ‘search all extracted text’ (if enabled) beneath that.\n\n\nThe document viewer pane\nOn the selected page, each redaction is highlighted with a box next to its suggested redaction label (e.g. person, email).\n\n\n\nDocument view pane\n\n\nThere are a number of different options to add and modify redaction boxes and page on the document viewer pane. To zoom in and out of the page, use your mouse wheel. To move around the page while zoomed, you need to be in modify mode. Scroll to the bottom of the document viewer to see the relevant controls. You should see a box icon, a hand icon, and two arrows pointing counter-clockwise and clockwise.\n\n\n\nChange redaction mode\n\n\nClick on the hand icon to go into modify mode. When you click and hold on the document viewer, This will allow you to move around the page when zoomed in. To rotate the page, you can click on either of the round arrow buttons to turn in that direction.\nNOTE: When you switch page, the viewer will stay in your selected orientation, so if it looks strange, just rotate the page again and hopefully it will look correct!\n\nModify existing redactions (hand icon)\nAfter clicking on the hand icon, the interface allows you to modify existing redaction boxes. When in this mode, you can click and hold on an existing box to move it.\n\n\n\nModify existing redaction box\n\n\nClick on one of the small boxes at the edges to change the size of the box. To delete a box, click on it to highlight it, then press delete on your keyboard. Alternatively, double click on a box and click ‘Remove’ on the box that appears.\n\n\n\nRemove existing redaction box\n\n\n\n\nAdd new redaction boxes (box icon)\nTo change to ‘add redaction boxes’ mode, scroll to the bottom of the page. Click on the box icon, and your cursor will change into a crosshair. Now you can add new redaction boxes where you wish. A popup will appear when you create a new box so you can select a label and colour for the new box.\n\n\n‘Locking in’ new redaction box format\nIt is possible to lock in a chosen format for new redaction boxes so that you don’t have the popup appearing each time. When you make a new box, select the options for your ‘locked’ format, and then click on the lock icon on the left side of the popup, which should turn blue.\n\n\n\nLock redaction box format\n\n\nYou can now add new redaction boxes without a popup appearing. If you want to change or ‘unlock’ the your chosen box format, you can click on the new icon that has appeared at the bottom of the document viewer pane that looks a little like a gift tag. You can then change the defaults, or click on the lock icon again to ‘unlock’ the new box format - then popups will appear again each time you create a new box.\n\n\n\nChange or unlock redaction box format\n\n\n\n\n\nApply redactions to PDF and Save changes on current page\nOnce you have reviewed all the redactions in your document and you are happy with the outputs, you can click ‘Apply revised redactions to PDF’ to create a new ’_redacted.pdf’ output alongside a new ’_review_file.csv’ output.\nIf you are working on a page and haven’t saved for a while, you can click ‘Save changes on current page to file’ to ensure that they are saved to an updated ‘review_file.csv’ output.\n\n\n\nReview modified outputs\n\n\n\n\nSelecting and removing redaction boxes using the ‘Search suggested redactions’ table\nThe table shows a list of all the suggested redactions in the document alongside the page, label, and text (if available).\n\n\n\nSearch suggested redaction area\n\n\nIf you click on one of the rows in this table, you will be taken to the page of the redaction. Clicking on a redaction row on the same page will change the colour of redaction box to blue to help you locate it in the document viewer (just when using the app, not in redacted output PDFs).\n\n\n\nSearch suggested redaction area\n\n\nYou can choose a specific entity type to see which pages the entity is present on. If you want to go to the page specified in the table, you can click on a cell in the table and the review page will be changed to that page.\nTo filter the ‘Search suggested redactions’ table you can: 1. Click on one of the dropdowns (Redaction category, Page, Text), and select an option, or 2. Write text in the ‘Filter’ box just above the table. Click the blue box to apply the filter to the table.\nOnce you have filtered the table, or selected a row from the table, you have a few options underneath on what you can do with the filtered rows:\n\nClick the Exclude all redactions in table button to remove all redactions visible in the table from the document. Important: ensure that you have clicked the blue tick icon next to the search box before doing this, or you will remove all redactions from the document. If you do end up doing this, click the ‘Undo last element removal’ button below to restore the redactions.\nClick the Exclude specific redaction row button to remove only the redaction from the last row you clicked on from the document. The currently selected row is visible below.\nClick the Exclude all redactions with the same text as selected row button to remove all redactions from the document that are exactly the same as the selected row text.\n\nNOTE: After excluding redactions using any of the above options, click the ‘Reset filters’ button below to ensure that the dropdowns and table return to seeing all remaining redactions in the document.\nIf you made a mistake, click the ‘Undo last element removal’ button to restore the Search suggested redactions table to its previous state (can only undo the last action).\n\n\nNavigating through the document using the ‘Search all extracted text’\nThe ‘search all extracted text’ table will contain text if you have just redacted a document, or if you have uploaded a ’…_ocr_output.csv’ file alongside a document file and review file on the Review redactions tab as described above.\nYou can navigate through the document using this table. When you click on a row, the Document viewer pane to the left will change to the selected page.\n\n\n\nSearch suggested redaction area\n\n\nYou can search through the extracted text by using the search bar just above the table, which should filter as you type. To apply the filter and ‘cut’ the table, click on the blue tick inside the box next to your search term. To return the table to its original content, click the button below the table ‘Reset OCR output table filter’.\n\n\n\nSearch suggested redaction area"
  },
  {
    "objectID": "src/user_guide.html#redacting-tabular-data-files-xlsxcsv-or-copy-and-pasted-text",
    "href": "src/user_guide.html#redacting-tabular-data-files-xlsxcsv-or-copy-and-pasted-text",
    "title": "User guide",
    "section": "Redacting tabular data files (XLSX/CSV) or copy and pasted text",
    "text": "Redacting tabular data files (XLSX/CSV) or copy and pasted text\n\nTabular data files (XLSX/CSV)\nThe app can be used to redact tabular data files such as xlsx or csv files. For this to work properly, your data file needs to be in a simple table format, with a single table starting from the first cell (A1), and no other information in the sheet. Similarly for .xlsx files, each sheet in the file that you want to redact should be in this simple format.\nTo demonstrate this, we can use the example csv file ‘combined_case_notes.csv’, which is a small dataset of dummy social care case notes. Go to the ‘Open text or Excel/csv files’ tab. Drop the file into the upload area. After the file is loaded, you should see the suggested columns for redaction in the box underneath. You can select and deselect columns to redact as you wish from this list.\n\n\n\ncsv upload\n\n\nIf you were instead to upload an xlsx file, you would see also a list of all the sheets in the xlsx file that can be redacted. The ‘Select columns’ area underneath will suggest a list of all columns in the file across all sheets.\n\n\n\nxlsx upload\n\n\nOnce you have chosen your input file and sheets/columns to redact, you can choose the redaction method. ‘Local’ will use the same local model as used for documents on the first tab. ‘AWS Comprehend’ will give better results, at a slight cost.\nWhen you click Redact text/data files, you will see the progress of the redaction task by file and sheet, and you will receive a csv output with the redacted data.\n\n\nChoosing output anonymisation format\nYou can also choose the anonymisation format of your output results. Open the tab ‘Anonymisation output format’ to see the options. By default, any detected PII will be replaced with the word ‘REDACTED’ in the cell. You can choose one of the following options as the form of replacement for the redacted text: - replace with ‘REDACTED’: Replaced by the word ‘REDACTED’ (default) - replace with : Replaced by e.g. ‘PERSON’ for people, ‘EMAIL_ADDRESS’ for emails etc. - redact completely: Text is removed completely and replaced by nothing. - hash: Replaced by a unique long ID code that is consistent with entity text. I.e. a particular name will always have the same ID code. - mask: Replace with stars ’*’.\n\n\nRedacting copy and pasted text\nYou can also write open text into an input box and redact that using the same methods as described above. To do this, write or paste text into the ‘Enter open text’ box that appears when you open the ‘Redact open text’ tab. Then select a redaction method, and an anonymisation output format as described above. The redacted text will be printed in the output textbox, and will also be saved to a simple csv file in the output file box.\n\n\n\nText analysis output\n\n\n\n\nRedaction log outputs\nA list of the suggested redaction outputs from the tabular data / open text data redaction is available on the Redaction settings page under ‘Log file outputs’."
  },
  {
    "objectID": "src/user_guide.html#table-of-contents-1",
    "href": "src/user_guide.html#table-of-contents-1",
    "title": "User guide",
    "section": "Table of contents",
    "text": "Table of contents\n\nMerging redaction review files\nIdentifying and redacting duplicate pages\nFuzzy search and redaction\nExport redactions to and import from Adobe Acrobat\n\nExporting to Adobe Acrobat\nImporting from Adobe Acrobat\n\nUsing the AWS Textract document API\nUsing AWS Textract and Comprehend when not running in an AWS environment\nModifying existing redaction review files"
  },
  {
    "objectID": "src/user_guide.html#merging-redaction-review-files",
    "href": "src/user_guide.html#merging-redaction-review-files",
    "title": "User guide",
    "section": "Merging redaction review files",
    "text": "Merging redaction review files\nSay you have run multiple redaction tasks on the same document, and you want to merge all of these redactions together. You could do this in your spreadsheet editor, but this could be fiddly especially if dealing with multiple review files or large numbers of redactions. The app has a feature to combine multiple review files together to create a ‘merged’ review file.\n\n\n\nMerging review files in the user interface\n\n\nYou can find this option at the bottom of the ‘Redaction Settings’ tab. Upload multiple review files here to get a single output ‘merged’ review_file. In the examples file, merging the ‘review_file_custom.csv’ and ‘review_file_local.csv’ files give you an output containing redaction boxes from both. This combined review file can then be uploaded into the review tab following the usual procedure.\n\n\n\nMerging review files outputs in spreadsheet"
  },
  {
    "objectID": "src/user_guide.html#identifying-and-redacting-duplicate-pages",
    "href": "src/user_guide.html#identifying-and-redacting-duplicate-pages",
    "title": "User guide",
    "section": "Identifying and redacting duplicate pages",
    "text": "Identifying and redacting duplicate pages\nThe files for this section are stored here.\nSome redaction tasks involve removing duplicate pages of text that may exist across multiple documents. This feature helps you find and remove duplicate content that may exist in single or multiple documents. It can identify everything from single identical pages to multi-page sections (subdocuments). The process involves three main steps: configuring the analysis, reviewing the results in the interactive interface, and then using the generated files to perform the redactions.\n\n\n\nExample duplicate page inputs\n\n\nStep 1: Upload and Configure the Analysis First, navigate to the “Identify duplicate pages” tab. Upload all the ocr_output.csv files you wish to compare into the file area. These files are generated every time you run a redaction task and contain the text for each page of a document.\nFor our example, you can upload the four ‘ocr_output.csv’ files provided in the example folder into the file area. Click ‘Identify duplicate pages’ and you will see a number of files returned. In case you want to see the original PDFs, they are available here.\nThe default options will search for matching subdocuments of any length. Before running the analysis, you can configure these matching parameters to tell the tool what you’re looking for:\n\n\n\nDuplicate matching parameters\n\n\nMatching Parameters - Similarity Threshold: A score from 0 to 1. Pages or sequences of pages with a calculated text similarity above this value will be considered a match. The default of 0.9 (90%) is a good starting point for finding near-identical pages. - Min Word Count: Pages with fewer words than this value will be completely ignored during the comparison. This is extremely useful for filtering out blank pages, title pages, or boilerplate pages that might otherwise create noise in the results. The default is 10. - Choosing a Matching Strategy: You have three main options to find duplicate content. - ‘Subdocument’ matching (default): Use this to find the longest possible sequence of matching pages. The tool will find an initial match and then automatically expand it forward page-by-page until the consecutive match breaks. This is the best method for identifying complete copied chapters or sections of unknown length. This is enabled by default by ticking the “Enable ‘subdocument’ matching” box. This setting overrides the described below. - Minimum length subdocument matching: Use this to find sequences of consecutively matching pages with a minimum page lenght. For example, setting the slider to 3 will only return sections that are at least 3 pages long. How to enable: Untick the “Enable ‘subdocument’ matching” box and set the “Minimum consecutive pages” slider to a value greater than 1. - Single Page Matching: Use this to find all individual page pairs that are similar to each other. Leave the “Enable ‘subdocument’ matching” box unchecked and keep the “Minimum consecutive pages” slider at 1.\nOnce your parameters are set, click the “Identify duplicate pages/subdocuments” button.\nStep 2: Review Results in the Interface After the analysis is complete, the results will be displayed directly in the interface.\nAnalysis Summary: A table will appear showing a summary of all the matches found. The columns will change depending on the matching strategy you chose. For subdocument matches, it will show the start and end pages of the matched sequence.\nInteractive Preview: This is the most important part of the review process. Click on any row in the summary table. The full text of the matching page(s) will appear side-by-side in the “Full Text Preview” section below, allowing you to instantly verify the accuracy of the match.\n\n\n\nDuplicate review interface\n\n\nStep 3: Download and Use the Output Files The analysis also generates a set of downloadable files for your records and for performing redactions.\n\npage_similarity_results.csv: This is a detailed report of the analysis you just ran. It shows a breakdown of the pages from each file that are most similar to each other above the similarity threshold. You can compare the text in the two columns ‘Page_1_Text’ and ‘Page_2_Text’. For single-page matches, it will list each pair of matching pages. For subdocument matches, it will list the start and end pages of each matched sequence, along with the total length of the match.\n\n\n\n\nPage similarity file example\n\n\n\n[Original_Filename]_pages_to_redact.csv: For each input document that was found to contain duplicate content, a separate redaction list is created. This is a simple, one-column CSV file containing a list of all page numbers that should be removed. To use these files, you can either upload the original document (i.e. the PDF) on the ‘Review redactions’ tab, and then click on the ‘Apply relevant duplicate page output to document currently under review’ button. You should see the whole pages suggested for redaction on the ‘Review redactions’ tab. Alternatively, you can reupload the file into the whole page redaction section as described in the ‘Full page redaction list example’ section.\n\n\n\n\nExample duplicate page redaction list\n\n\nIf you want to combine the results from this redaction process with previous redaction tasks for the same PDF, you could merge review file outputs following the steps described in Merging existing redaction review files above."
  },
  {
    "objectID": "src/user_guide.html#fuzzy-search-and-redaction",
    "href": "src/user_guide.html#fuzzy-search-and-redaction",
    "title": "User guide",
    "section": "Fuzzy search and redaction",
    "text": "Fuzzy search and redaction\nThe files for this section are stored here.\nSometimes you may be searching for terns that are slightly mispelled throughout a document, for example names. The document redaction app gives the option for searching for long phrases that may contain spelling mistakes, a method called ‘fuzzy matching’.\nTo do this, go to the Redaction Settings, and the ‘Select entity types to redact’ area. In the box below relevant to your chosen redaction method (local or AWS Comprehend), select ‘CUSTOM_FUZZY’ from the list. Next, we can select the maximum number of spelling mistakes allowed in the search (up to nine). Here, you can either type in a number or use the small arrows to the right of the box. Change this option to 3. This will allow for a maximum of three ‘changes’ in text needed to match to the desired search terms.\nThe other option we can leave as is (should fuzzy search match on entire phrases in deny list) - this option would allow you to fuzzy search on each individual word in the search phrase (apart from stop words).\nNext, we can upload a deny list on the same page to do the fuzzy search. A relevant deny list file can be found here - you can upload it following these steps. You will notice that the suggested deny list has spelling mistakes compared to phrases found in the example document.\n\n\n\nDeny list example with spelling mistakes\n\n\nUpload the Partnership-Agreement-Toolkit file into the ‘Redact document’ area on the first tab. Now, press the ‘Redact document’ button.\nUsing these deny list with spelling mistakes, the app fuzzy match these terms to the correct text in the document. After redaction is complete, go to the Review Redactions tab to check the first tabs. You should see that the phrases in the deny list have been successfully matched.\n\n\n\nFuzzy match review outputs"
  },
  {
    "objectID": "src/user_guide.html#export-to-and-import-from-adobe",
    "href": "src/user_guide.html#export-to-and-import-from-adobe",
    "title": "User guide",
    "section": "Export to and import from Adobe",
    "text": "Export to and import from Adobe\nFiles for this section are stored here.\n\nExporting to Adobe Acrobat\nThe Document Redaction app has a feature to export suggested redactions to Adobe, and likewise to import Adobe comment files into the app. The file format used is the .xfdf Adobe comment file format - you can find more information about how to use these files here.\nTo convert suggested redactions to Adobe format, you need to have the original PDF and a review file csv in the input box at the top of the Review redactions page.\n\n\n\nInput area for files for Adobe export\n\n\nThen, you can find the export to Adobe option at the bottom of the Review redactions tab. Adobe comment files will be output here.\n\n\n\nAdobe export/import options\n\n\nOnce the input files are ready, you can click on the ‘Convert review file to Adobe comment format’. You should see a file appear in the output box with a ‘.xfdf’ file type. To use this in Adobe, after download to your computer, you should be able to double click on it, and a pop-up box will appear asking you to find the PDF file associated with it. Find the original PDF file used for your redaction task. The file should be opened up in Adobe Acrobat with the suggested redactions.\n\n\n\nSuggested redactions in Adobe Acrobat\n\n\n\n\nImporting from Adobe Acrobat\nThe app also allows you to import .xfdf files from Adobe Acrobat. To do this, go to the same Adobe import/export area as described above at the bottom of the Review Redactions tab. In this box, you need to upload a .xfdf Adobe comment file, along with the relevant original PDF for redaction.\n\n\n\nAdobe import interface\n\n\nWhen you click the ‘convert .xfdf comment file to review_file.csv’ button, the app should take you up to the top of the screen where the new review file has been created and can be downloaded.\n\n\n\nOutputs from Adobe import"
  },
  {
    "objectID": "src/user_guide.html#using-the-aws-textract-document-api",
    "href": "src/user_guide.html#using-the-aws-textract-document-api",
    "title": "User guide",
    "section": "Using the AWS Textract document API",
    "text": "Using the AWS Textract document API\nThis option can be enabled by your system admin, in the config file (‘SHOW_WHOLE_DOCUMENT_TEXTRACT_CALL_OPTIONS’ environment variable, and subsequent variables). Using this, you will have the option to submit whole documents in quick succession to the AWS Textract service to get extracted text outputs quickly (faster than using the ‘Redact document’ process described here).\n\nStarting a new Textract API job\nTo use this feature, first upload a document file in the file input box in the usual way on the first tab of the app. Under AWS Textract signature detection you can select whether or not you would like to analyse signatures or not (with a cost implication).\nThen, open the section under the heading ‘Submit whole document to AWS Textract API…’.\n\n\n\nTextract document API menu\n\n\nClick ‘Analyse document with AWS Textract API call’. After a few seconds, the job should be submitted to the AWS Textract service. The box ‘Job ID to check status’ should now have an ID filled in. If it is not already filled with previous jobs (up to seven days old), the table should have a row added with details of the new API job.\nClick the button underneath, ‘Check status of Textract job and download’, to see progress on the job. Processing will continue in the background until the job is ready, so it is worth periodically clicking this button to see if the outputs are ready. In testing, and as a rough estimate, it seems like this process takes about five seconds per page. However, this has not been tested with very large documents. Once ready, the ’_textract.json’ output should appear below.\n\n\nTextract API job outputs\nThe ’_textract.json’ output can be used to speed up further redaction tasks as described previously, the ‘Existing Textract output file found’ flag should now be ticked.\n\n\n\nTextract document API initial ouputs\n\n\nYou can now easily get the ’…_ocr_output.csv’ redaction output based on this ’_textract.json’ (described in Redaction outputs) by clicking on the button ‘Convert Textract job outputs to OCR results’. You can now use this file e.g. for identifying duplicate pages, or for redaction review."
  },
  {
    "objectID": "src/user_guide.html#using-aws-textract-and-comprehend-when-not-running-in-an-aws-environment",
    "href": "src/user_guide.html#using-aws-textract-and-comprehend-when-not-running-in-an-aws-environment",
    "title": "User guide",
    "section": "Using AWS Textract and Comprehend when not running in an AWS environment",
    "text": "Using AWS Textract and Comprehend when not running in an AWS environment\nAWS Textract and Comprehend give much better results for text extraction and document redaction than the local model options in the app. The most secure way to access them in the Redaction app is to run the app in a secure AWS environment with relevant permissions. Alternatively, you could run the app on your own system while logged in to AWS SSO with relevant permissions.\nHowever, it is possible to access these services directly via API from outside an AWS environment by creating IAM users and access keys with relevant permissions to access AWS Textract and Comprehend services. Please check with your IT and data security teams that this approach is acceptable for your data before trying the following approaches.\nTo do the following, in your AWS environment you will need to create a new user with permissions for “textract:AnalyzeDocument”, “textract:DetectDocumentText”, and “comprehend:DetectPiiEntities”. Under security credentials, create new access keys - note down the access key and secret key.\n\nDirect access by passing AWS access keys through app\nThe Redaction Settings tab now has boxes for entering the AWS access key and secret key. If you paste the relevant keys into these boxes before performing redaction, you should be able to use these services in the app.\n\n\nPicking up AWS access keys through an .env file\nThe app also has the capability of picking up AWS access key details through a .env file located in a ‘/config/aws_config.env’ file (default), or alternative .env file location specified by the environment variable AWS_CONFIG_PATH. The env file should look like the following with just two lines:\nAWS_ACCESS_KEY= your-access-key AWS_SECRET_KEY= your-secret-key\nThe app should then pick up these keys when trying to access the AWS Textract and Comprehend services during redaction.\nAgain, a lot can potentially go wrong with AWS solutions that are insecure, so before trying the above please consult with your AWS and data security teams."
  },
  {
    "objectID": "src/user_guide.html#modifying-existing-redaction-review-files",
    "href": "src/user_guide.html#modifying-existing-redaction-review-files",
    "title": "User guide",
    "section": "Modifying existing redaction review files",
    "text": "Modifying existing redaction review files\nNote: As of version 0.7.0 you can now modify redaction review files directly in the app on the ‘Review redactions’ tab. Open the accordion ‘View and edit review data’ under the file input area. You can edit review file data cells here - press Enter to apply changes. You should see the effect on the current page if you click the ‘Save changes on current page to file’ button to the right.\nYou can find the folder containing the files discussed in this section here.\nAs well as serving as inputs to the document redaction app’s review function, the ‘review_file.csv’ output can be modified outside of the app, and also merged with others from multiple redaction attempts on the same file. This gives you the flexibility to change redaction details outside of the app.\nIf you open up a ‘review_file’ csv output using a spreadsheet software program such as Microsoft Excel you can easily modify redaction properties. Open the file ‘Partnership-Agreement-Toolkit_0_0_redacted.pdf_review_file_local.csv’, and you should see a spreadshet with just four suggested redactions (see below). The following instructions are for using Excel.\n\n\n\nReview file before\n\n\nThe first thing we can do is remove the first row - ‘et’ is suggested as a person, but is obviously not a genuine instance of personal information. Right click on the row number and select delete on this menu. Next, let’s imagine that what the app identified as a ‘phone number’ was in fact another type of number and so we wanted to change the label. Simply click on the relevant label cells, let’s change it to ‘SECURITY_NUMBER’. You could also use ‘Find & Select’ -&gt; ‘Replace’ from the top ribbon menu if you wanted to change a number of labels simultaneously.\nHow about we wanted to change the colour of the ‘email address’ entry on the redaction review tab of the redaction app? The colours in a review file are based on an RGB scale with three numbers ranging from 0-255. You can find suitable colours here. Using this scale, if I wanted my review box to be pure blue, I can change the cell value to (0,0,255).\nImagine that a redaction box was slightly too small, and I didn’t want to use the in-app options to change the size. In the review file csv, we can modify e.g. the ymin and ymax values for any box to increase the extent of the redaction box. For the ‘email address’ entry, let’s decrease ymin by 5, and increase ymax by 5.\nI have saved an output file following the above steps as ‘Partnership-Agreement-Toolkit_0_0_redacted.pdf_review_file_local_mod.csv’ in the same folder that the original was found. Let’s upload this file to the app along with the original pdf to see how the redactions look now.\n\n\n\nReview file after modification\n\n\nWe can see from the above that we have successfully removed a redaction box, changed labels, colours, and redaction box sizes."
  },
  {
    "objectID": "src/installation_guide.html",
    "href": "src/installation_guide.html",
    "title": "App installation guide (with CDK)",
    "section": "",
    "text": "This guide gives an overview of how to install the app in an AWS environment using the code in the cdk/ folder of this Github repo. The most important thing you need is some familiarity with AWS and how to use it via console or command line, as well as administrator access to at least one region. Then follow the below steps.\n\n\n\nInstall git on your computer from: https://git-scm.com\nYou will also need to install nodejs and npm: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\nYou will need an AWS Administrator account in your desired region to install.\nYou will need AWS CDK v2 installed: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\nYou will need to bootstrap the environment with CDK in both your primary region, and us-east-1 if installing CloudFront and associated WAF.\n# Bootstrap your primary region\ncdk bootstrap aws://&lt;YOUR_AWS_ACCOUNT&gt;/eu-west-1\n\n# Bootstrap the us-east-1 region\ncdk bootstrap aws://&lt;YOUR_AWS_ACCOUNT&gt;/us-east-1\nIn command line, write: bash     git clone https://github.com/seanpedrick-case/doc_redaction.git"
  },
  {
    "objectID": "src/installation_guide.html#prerequisites",
    "href": "src/installation_guide.html#prerequisites",
    "title": "App installation guide (with CDK)",
    "section": "",
    "text": "Install git on your computer from: https://git-scm.com\nYou will also need to install nodejs and npm: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\nYou will need an AWS Administrator account in your desired region to install.\nYou will need AWS CDK v2 installed: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\nYou will need to bootstrap the environment with CDK in both your primary region, and us-east-1 if installing CloudFront and associated WAF.\n# Bootstrap your primary region\ncdk bootstrap aws://&lt;YOUR_AWS_ACCOUNT&gt;/eu-west-1\n\n# Bootstrap the us-east-1 region\ncdk bootstrap aws://&lt;YOUR_AWS_ACCOUNT&gt;/us-east-1\nIn command line, write: bash     git clone https://github.com/seanpedrick-case/doc_redaction.git"
  },
  {
    "objectID": "src/installation_guide.html#if-getting-an-ssl-certificate-for-an-existing-domain",
    "href": "src/installation_guide.html#if-getting-an-ssl-certificate-for-an-existing-domain",
    "title": "App installation guide (with CDK)",
    "section": "If getting an SSL certificate for an existing domain",
    "text": "If getting an SSL certificate for an existing domain\nMake sure to point the certificate to *.&lt;domain-name&gt;.\nUpdate your DNS records to include the CNAME record given by AWS. After your stack has been created, you will also need to create a CNAME DNS record for your domain pointing to your load balancer DNS with a subdomain, e.g., redaction.&lt;domain-name&gt;.\n\nCreate a python environment, load in packages from requirements.txt.\nNeed a cdk.json in the cdk folder. It should contain the following:\n{\n    \"app\": \"&lt;PATH TO PYTHON ENVIRONMENT FOLDER WHERE REQUIREMENTS HAVE BEEN LOADED&gt;python.exe app.py\",\n    \"context\": {\n      \"@aws-cdk/aws-apigateway:usagePlanKeyOrderInsensitiveId\": true,\n      \"@aws-cdk/core:stackRelativeExports\": true,\n      \"@aws-cdk/aws-rds:lowercaseDbIdentifier\": true,\n      \"@aws-cdk/aws-lambda:recognizeVersionProps\": true,\n      \"@aws-cdk/aws-lambda:recognizeLayerVersion\": true,\n      \"@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021\": true,\n      \"@aws-cdk/aws-ecs:arnFormatIncludesClusterName\": true,\n      \"@aws-cdk/core:newStyleStackSynthesis\": true,\n      \"aws-cdk:enableDiffNoFail\": true,\n      \"@aws-cdk/aws-ec2:restrictDefaultSecurityGroup\": true,\n      \"@aws-cdk/aws-apigateway:disableCloudWatchRole\": true,\n      \"@aws-cdk/core:target-partitions\": [\n        \"aws\",\n        \"aws-cn\"\n      ]\n    }\n  }\nCreate a cdk_config.env file in the config subfolder. Here as a minimum it would be useful to put the following details in the env file (below are example values, other possible variables to use here can be seen in the cdk folder/cdk_config.py).\nCDK_PREFIX=example-prefix # Prefix to most created elements in your stack\nVPC_NAME=example-vpc-name # Name of the VPC within which all the other elements will be created\nAWS_REGION=us-west-1 # Region where elements will be created\nAWS_ACCOUNT_ID=1234567890 # AWS account ID that has administrator access that you will use for deploying the stack\nCDK_FOLDER=C:/path_to_cdk_folder/ # The place where the cdk folder code is located\nCONTEXT_FILE=C:/path_to_cdk_folder/cdk.context.json\nEXISTING_IGW_ID=igw-1234567890 # (optional) The ID for an existing internet gateway that you want to use instead of creating a new one\nSINGLE_NAT_GATEWAY_ID=nat-123456789 # (optional) The ID for an existing NAT gateway that you want to use instead of creating a new one\nCOGNITO_USER_POOL_DOMAIN_PREFIX=lambeth-redaction-37924 # The prefix of the login / user sign up domain that you want to use with Cognito login. Should not contain the terms amazon, aws, or cognito.\nRUN_USEAST_STACK=False # Set this to True only if you have permissions to create a Cloudfront distribution and web ACL on top of it in the us-east-1 region. If you don't, the section below shows how you can create the CloudFront resource manually and map it to your application load balancer (as you should have permissions for that if you are admin in your region).\n\nNote: If you are using an SSL certificate with Cognito login on the application load balancer, you can set COGNITO_AUTH to 0 above, as you don’t need the second login step to get to the app"
  },
  {
    "objectID": "src/installation_guide.html#codebuild",
    "href": "src/installation_guide.html#codebuild",
    "title": "App installation guide (with CDK)",
    "section": "Codebuild",
    "text": "Codebuild\nNeed to build CodeBuild project after stack has finished building, as there will be no container in ECR.\nGo to CodeBuild -&gt; your project -&gt; click Start build. Check the logs, the build should be progressing."
  },
  {
    "objectID": "src/installation_guide.html#create-a-config.env-file-and-upload-to-s3",
    "href": "src/installation_guide.html#create-a-config.env-file-and-upload-to-s3",
    "title": "App installation guide (with CDK)",
    "section": "Create a config.env file and upload to S3",
    "text": "Create a config.env file and upload to S3\nThe Fargate task definition references a config.env file.\nNeed to create a config.env file to upload to the S3 bucket that has the variables:\nCOGNITO_AUTH=1\nRUN_AWS_FUNCTIONS=1\nSESSION_OUTPUT_FOLDER=True # If this is False it currently seems to fail to allow for writable log directories\nGo to S3 and choose the new ...-logs bucket that you created. Upload the config.env file into this bucket."
  },
  {
    "objectID": "src/installation_guide.html#update-elastic-container-service",
    "href": "src/installation_guide.html#update-elastic-container-service",
    "title": "App installation guide (with CDK)",
    "section": "Update Elastic Container Service",
    "text": "Update Elastic Container Service\nNow that the app container is in Elastic Container Registry, you can proceed to run the app on a Fargate server.\nGo to your new cluster, your new service, and select ‘Update service’.\nSelect ‘Force new deployment’, and then set ‘Desired number of tasks’ to 1."
  },
  {
    "objectID": "src/installation_guide.html#set-mfa-optional",
    "href": "src/installation_guide.html#set-mfa-optional",
    "title": "App installation guide (with CDK)",
    "section": "Set MFA (optional)",
    "text": "Set MFA (optional)\nOn the Cognito user pool page you can also enable MFA, if you are using an SSL certificate with Cognito login on the Application Load Balancer. Go to Cognito -&gt; your user pool -&gt; Sign in -&gt; Multi-factor authentication"
  },
  {
    "objectID": "src/installation_guide.html#security-features",
    "href": "src/installation_guide.html#security-features",
    "title": "App installation guide (with CDK)",
    "section": "Security features",
    "text": "Security features\nIn your CloudFront distribution, under ‘Security’ -&gt; Edit -&gt; Enable security protections.\nChoose rate limiting (default is fine).\nCreate.\nIn CloudFront geographic restrictions -&gt; Countries -&gt; choose an Allow list of countries.\nClick again on Edit.\nAWS WAF protection enabled you should see a link titled ‘View details of your configuration’.\nGo to Rules -&gt; AWS-AWSManagedRulesCommonRuleSet, click Edit.\nUnder SizeRestrictions_BODY choose rule action override ‘Override to Allow’. This is needed to allow for file upload to the app."
  },
  {
    "objectID": "src/app_settings.html",
    "href": "src/app_settings.html",
    "title": "App settings management guide",
    "section": "",
    "text": "Settings for the redaction app can be set from outside by changing values in the config.env file stored in your local config folder, or in S3 if running on AWS. This guide provides an overview of how to configure the application using environment variables. The application loads configurations using os.environ.get(). It first attempts to load variables from the file specified by APP_CONFIG_PATH (which defaults to config/app_config.env). If AWS_CONFIG_PATH is also set (e.g., to config/aws_config.env), variables are loaded from that file as well. Environment variables set directly in the system will always take precedence over those defined in these .env files."
  },
  {
    "objectID": "src/app_settings.html#app-configuration-file-config.env",
    "href": "src/app_settings.html#app-configuration-file-config.env",
    "title": "App settings management guide",
    "section": "App Configuration File (config.env)",
    "text": "App Configuration File (config.env)\nThis section details variables related to the main application configuration file.\n\nAPP_CONFIG_PATH\n\nDescription: Specifies the path to the application configuration .env file. This file contains various settings that control the application’s behavior.\nDefault Value: config/app_config.env\nConfiguration: Set as an environment variable directly. This variable defines where to load other application configurations, so it cannot be set within config/app_config.env itself."
  },
  {
    "objectID": "src/app_settings.html#aws-options",
    "href": "src/app_settings.html#aws-options",
    "title": "App settings management guide",
    "section": "AWS Options",
    "text": "AWS Options\nThis section covers configurations related to AWS services used by the application.\n\nAWS_CONFIG_PATH\n\nDescription: Specifies the path to the AWS configuration .env file. This file is intended to store AWS credentials and specific settings.\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly. This variable defines an additional source for AWS-specific configurations.\n\nRUN_AWS_FUNCTIONS\n\nDescription: Enables or disables AWS-specific functionalities within the application. Set to \"1\" to enable and \"0\" to disable.\nDefault Value: \"0\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nAWS_REGION\n\nDescription: Defines the AWS region where services like S3, Cognito, and Textract are located.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured).\n\nAWS_CLIENT_ID\n\nDescription: The client ID for AWS Cognito, used for user authentication.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured).\n\nAWS_CLIENT_SECRET\n\nDescription: The client secret for AWS Cognito, used in conjunction with the client ID for authentication.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured).\n\nAWS_USER_POOL_ID\n\nDescription: The user pool ID for AWS Cognito, identifying the user directory.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured).\n\nAWS_ACCESS_KEY\n\nDescription: The AWS access key ID for programmatic access to AWS services.\nDefault Value: '' (Note: Often found in the environment or AWS credentials file.)\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured). It’s also commonly configured via shared AWS credentials files or IAM roles.\n\nAWS_SECRET_KEY\n\nDescription: The AWS secret access key corresponding to the AWS access key ID.\nDefault Value: '' (Note: Often found in the environment or AWS credentials file.)\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured). It’s also commonly configured via shared AWS credentials files or IAM roles.\n\nDOCUMENT_REDACTION_BUCKET\n\nDescription: The name of the S3 bucket used for storing documents related to the redaction process.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/aws_config.env (if AWS_CONFIG_PATH is configured).\n\nCUSTOM_HEADER\n\nDescription: Specifies a custom header name to be included in requests, often used for services like AWS CloudFront.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nCUSTOM_HEADER_VALUE\n\nDescription: The value for the custom header specified by CUSTOM_HEADER.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured)."
  },
  {
    "objectID": "src/app_settings.html#image-options",
    "href": "src/app_settings.html#image-options",
    "title": "App settings management guide",
    "section": "Image Options",
    "text": "Image Options\nSettings related to image processing within the application.\n\nIMAGES_DPI\n\nDescription: Dots Per Inch (DPI) setting for image processing, affecting the resolution and quality of processed images.\nDefault Value: '300.0'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nLOAD_TRUNCATED_IMAGES\n\nDescription: Controls whether the application attempts to load truncated images. Set to 'True' to enable.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nMAX_IMAGE_PIXELS\n\nDescription: Sets the maximum number of pixels for an image that the application will process. Leave blank for no limit. This can help prevent issues with very large images.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "src/app_settings.html#file-io-options",
    "href": "src/app_settings.html#file-io-options",
    "title": "App settings management guide",
    "section": "File I/O Options",
    "text": "File I/O Options\nConfiguration for input and output file handling.\n\nSESSION_OUTPUT_FOLDER\n\nDescription: If set to 'True', the application will save output and input files into session-specific subfolders, helping to organise files from different user sessions.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nGRADIO_OUTPUT_FOLDER (aliased as OUTPUT_FOLDER)\n\nDescription: Specifies the default output folder for files generated by Gradio components. Can be set to “TEMP” to use a temporary directory.\nDefault Value: 'output/'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nGRADIO_INPUT_FOLDER (aliased as INPUT_FOLDER)\n\nDescription: Specifies the default input folder for files used by Gradio components. Can be set to “TEMP” to use a temporary directory.\nDefault Value: 'input/'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "src/app_settings.html#logging-options",
    "href": "src/app_settings.html#logging-options",
    "title": "App settings management guide",
    "section": "Logging Options",
    "text": "Logging Options\nSettings for configuring application logging, including log formats and storage locations.\n\nSAVE_LOGS_TO_CSV\n\nDescription: Enables or disables saving logs to CSV files. Set to 'True' to enable.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nUSE_LOG_SUBFOLDERS\n\nDescription: If enabled ('True'), logs will be stored in subfolders based on date and hostname, aiding in log organisation.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nFEEDBACK_LOGS_FOLDER\n\nDescription: Specifies the base folder for storing feedback logs. If USE_LOG_SUBFOLDERS is true, date/hostname subfolders will be created within this folder.\nDefault Value: 'feedback/'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nACCESS_LOGS_FOLDER\n\nDescription: Specifies the base folder for storing access logs. If USE_LOG_SUBFOLDERS is true, date/hostname subfolders will be created within this folder.\nDefault Value: 'logs/'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nUSAGE_LOGS_FOLDER\n\nDescription: Specifies the base folder for storing usage logs. If USE_LOG_SUBFOLDERS is true, date/hostname subfolders will be created within this folder.\nDefault Value: 'usage/'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nDISPLAY_FILE_NAMES_IN_LOGS\n\nDescription: If set to 'True', file names will be included in the log entries.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCSV_ACCESS_LOG_HEADERS\n\nDescription: Defines custom headers for CSV access logs. If left blank, component labels will be used as headers.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCSV_FEEDBACK_LOG_HEADERS\n\nDescription: Defines custom headers for CSV feedback logs. If left blank, component labels will be used as headers.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCSV_USAGE_LOG_HEADERS\n\nDescription: Defines custom headers for CSV usage logs.\nDefault Value: A predefined list of header names. Refer to tools/config.py for the complete list.\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nSAVE_LOGS_TO_DYNAMODB\n\nDescription: Enables or disables saving logs to AWS DynamoDB. Set to 'True' to enable. Requires appropriate AWS setup.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nACCESS_LOG_DYNAMODB_TABLE_NAME\n\nDescription: The name of the DynamoDB table used for storing access logs.\nDefault Value: 'redaction_access_log'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nDYNAMODB_ACCESS_LOG_HEADERS\n\nDescription: Specifies the headers (attributes) for the DynamoDB access log table.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nFEEDBACK_LOG_DYNAMODB_TABLE_NAME\n\nDescription: The name of the DynamoDB table used for storing feedback logs.\nDefault Value: 'redaction_feedback'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nDYNAMODB_FEEDBACK_LOG_HEADERS\n\nDescription: Specifies the headers (attributes) for the DynamoDB feedback log table.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nUSAGE_LOG_DYNAMODB_TABLE_NAME\n\nDescription: The name of the DynamoDB table used for storing usage logs.\nDefault Value: 'redaction_usage'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nDYNAMODB_USAGE_LOG_HEADERS\n\nDescription: Specifies the headers (attributes) for the DynamoDB usage log table.\nDefault Value: ''\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nLOGGING\n\nDescription: Enables or disables general console logging. Set to 'True' to enable.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nLOG_FILE_NAME\n\nDescription: Specifies the name for the CSV log file if SAVE_LOGS_TO_CSV is enabled.\nDefault Value: 'log.csv'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "src/app_settings.html#redaction-options",
    "href": "src/app_settings.html#redaction-options",
    "title": "App settings management guide",
    "section": "Redaction Options",
    "text": "Redaction Options\nConfigurations related to the text redaction process, including PII detection models and external tool paths.\n\nTESSERACT_FOLDER\n\nDescription: Path to the local Tesseract OCR installation folder. Only required if Tesseract is not in path, or you are running a version of the app as an .exe installed with Pyinstaller. Gives the path to the local Tesseract OCR model for text extraction.\nDefault Value: \"\" (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nPOPPLER_FOLDER\n\nDescription: Path to the local Poppler installation’s bin folder. Only required if Tesseract is not in path, or you are running a version of the app as an .exe installed with Pyinstaller. Poppler is used for PDF processing.\nDefault Value: \"\" (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nSELECTABLE_TEXT_EXTRACT_OPTION\n\nDescription: Display name in the UI for the text extraction method that processes selectable text directly from PDFs.\nDefault Value: \"Local model - selectable text\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nTESSERACT_TEXT_EXTRACT_OPTION\n\nDescription: Display name in the UI for the text extraction method using local Tesseract OCR (for PDFs without selectable text).\nDefault Value: \"Local OCR model - PDFs without selectable text\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nTEXTRACT_TEXT_EXTRACT_OPTION\n\nDescription: Display name in the UI for the text extraction method using AWS Textract service.\nDefault Value: \"AWS Textract service - all PDF types\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nNO_REDACTION_PII_OPTION\n\nDescription: Display name in the UI for the option to only extract text without performing any PII detection or redaction.\nDefault Value: \"Only extract text (no redaction)\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nLOCAL_PII_OPTION\n\nDescription: Display name in the UI for the PII detection method using a local model.\nDefault Value: \"Local\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nAWS_PII_OPTION\n\nDescription: Display name in the UI for the PII detection method using AWS Comprehend.\nDefault Value: \"AWS Comprehend\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nSHOW_LOCAL_TEXT_EXTRACTION_OPTIONS\n\nDescription: Controls whether local text extraction options (selectable text, Tesseract) are shown in the UI. Set to 'True' to show.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nSHOW_AWS_TEXT_EXTRACTION_OPTIONS\n\nDescription: Controls whether AWS Textract text extraction option is shown in the UI. Set to 'True' to show.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nDEFAULT_TEXT_EXTRACTION_MODEL\n\nDescription: Sets the default text extraction model selected in the UI. Defaults to TEXTRACT_TEXT_EXTRACT_OPTION if AWS options are shown; otherwise, defaults to SELECTABLE_TEXT_EXTRACT_OPTION.\nDefault Value: Value of TEXTRACT_TEXT_EXTRACT_OPTION if SHOW_AWS_TEXT_EXTRACTION_OPTIONS is True, else value of SELECTABLE_TEXT_EXTRACT_OPTION.\nConfiguration: Set as an environment variable directly, or include in config/app_config.env. Provide one of the text extraction option display names.\n\nSHOW_LOCAL_PII_DETECTION_OPTIONS\n\nDescription: Controls whether the local PII detection option is shown in the UI. Set to 'True' to show.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nSHOW_AWS_PII_DETECTION_OPTIONS\n\nDescription: Controls whether the AWS Comprehend PII detection option is shown in the UI. Set to 'True' to show.\nDefault Value: 'True'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nDEFAULT_PII_DETECTION_MODEL\n\nDescription: Sets the default PII detection model selected in the UI. Defaults to AWS_PII_OPTION if AWS options are shown; otherwise, defaults to LOCAL_PII_OPTION.\nDefault Value: Value of AWS_PII_OPTION if SHOW_AWS_PII_DETECTION_OPTIONS is True, else value of LOCAL_PII_OPTION.\nConfiguration: Set as an environment variable directly, or include in config/app_config.env. Provide one of the PII detection option display names.\n\nCHOSEN_COMPREHEND_ENTITIES\n\nDescription: A list of AWS Comprehend PII entity types to be redacted when using AWS Comprehend.\nDefault Value: A predefined list of entity types. Refer to tools/config.py for the complete list.\nConfiguration: Set as an environment variable directly, or include in config/app_config.env. This should be a string representation of a Python list.\n\nFULL_COMPREHEND_ENTITY_LIST\n\nDescription: The complete list of PII entity types supported by AWS Comprehend that can be selected for redaction.\nDefault Value: A predefined list of entity types. Refer to tools/config.py for the complete list.\nConfiguration: This is typically an informational variable reflecting the capabilities of AWS Comprehend and is not meant to be changed by users directly affecting redaction behavior (use CHOSEN_COMPREHEND_ENTITIES for that). Set as an environment variable directly, or include in config/app_config.env.\n\nCHOSEN_REDACT_ENTITIES\n\nDescription: A list of local PII entity types to be redacted when using the local PII detection model.\nDefault Value: A predefined list of entity types. Refer to tools/config.py for the complete list.\nConfiguration: Set as an environment variable directly, or include in config/app_config.env. This should be a string representation of a Python list.\n\nFULL_ENTITY_LIST\n\nDescription: The complete list of PII entity types supported by the local PII detection model that can be selected for redaction.\nDefault Value: A predefined list of entity types. Refer to tools/config.py for the complete list.\nConfiguration: This is typically an informational variable reflecting the capabilities of the local model and is not meant to be changed by users directly affecting redaction behavior (use CHOSEN_REDACT_ENTITIES for that). Set as an environment variable directly, or include in config/app_config.env.\n\nPAGE_BREAK_VALUE\n\nDescription: Defines a page count after which a function might restart. (Note: Currently not activated).\nDefault Value: '99999'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nMAX_TIME_VALUE\n\nDescription: Specifies the maximum time (in arbitrary units, likely seconds or milliseconds depending on implementation) for a process before it might be timed out.\nDefault Value: '999999'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCUSTOM_BOX_COLOUR\n\nDescription: Allows specifying a custom color for the redaction boxes drawn on documents (e.g., “grey”, “red”, “#FF0000”). If empty, a default color is used.\nDefault Value: \"\" (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nREDACTION_LANGUAGE\n\nDescription: Specifies the language for redaction processing. Currently, only “en” (English) is supported.\nDefault Value: \"en\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nRETURN_PDF_END_OF_REDACTION\n\nDescription: If set to 'True', the application will return a PDF document at the end of the redaction task.\nDefault Value: \"True\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCOMPRESS_REDACTED_PDF\n\nDescription: If set to 'True', the redacted PDF output will be compressed. This can reduce file size but may cause issues on systems with low memory.\nDefault Value: \"False\"\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "src/app_settings.html#app-run-options",
    "href": "src/app_settings.html#app-run-options",
    "title": "App settings management guide",
    "section": "App Run Options",
    "text": "App Run Options\nGeneral runtime configurations for the application.\n\nTLDEXTRACT_CACHE\n\nDescription: Path to the cache file used by the tldextract library, which helps in accurately extracting top-level domains (TLDs) from URLs.\nDefault Value: 'tld/.tld_set_snapshot'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCOGNITO_AUTH\n\nDescription: Enables or disables AWS Cognito authentication for the application. Set to '1' to enable.\nDefault Value: '0'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nRUN_DIRECT_MODE\n\nDescription: If set to '1', runs the application in a “direct mode”, which might alter certain behaviors (e.g., UI elements, processing flow).\nDefault Value: '0'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nMAX_QUEUE_SIZE\n\nDescription: The maximum number of requests that can be queued in the Gradio interface.\nDefault Value: '5' (integer)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nMAX_FILE_SIZE\n\nDescription: Maximum file size allowed for uploads (e.g., “250mb”, “1gb”).\nDefault Value: '250mb'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nGRADIO_SERVER_PORT\n\nDescription: The network port on which the Gradio server will listen.\nDefault Value: '7860' (integer)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nROOT_PATH\n\nDescription: The root path for the application, useful if running behind a reverse proxy (e.g., /app).\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nDEFAULT_CONCURRENCY_LIMIT\n\nDescription: The default concurrency limit for Gradio event handlers, controlling how many requests can be processed simultaneously.\nDefault Value: '3'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nGET_DEFAULT_ALLOW_LIST\n\nDescription: If set, enables the use of a default allow list for user access or specific functionalities. The exact behavior depends on application logic.\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nALLOW_LIST_PATH\n\nDescription: Path to a local CSV file containing an allow list (e.g., config/default_allow_list.csv).\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nS3_ALLOW_LIST_PATH\n\nDescription: Path to an allow list CSV file stored in an S3 bucket (e.g., default_allow_list.csv). Requires DOCUMENT_REDACTION_BUCKET to be set.\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nFILE_INPUT_HEIGHT\n\nDescription: Sets the height (in pixels or other CSS unit) of the file input component in the Gradio UI.\nDefault Value: '200'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "src/app_settings.html#cost-code-options",
    "href": "src/app_settings.html#cost-code-options",
    "title": "App settings management guide",
    "section": "Cost Code Options",
    "text": "Cost Code Options\nSettings related to tracking and applying cost codes for application usage.\n\nSHOW_COSTS\n\nDescription: If set to 'True', cost-related information will be displayed in the UI.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nGET_COST_CODES\n\nDescription: Enables fetching and using cost codes within the application. Set to 'True' to enable.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nDEFAULT_COST_CODE\n\nDescription: Specifies a default cost code to be used if cost codes are enabled but none is selected by the user.\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nCOST_CODES_PATH\n\nDescription: Path to a local CSV file containing available cost codes (e.g., config/COST_CENTRES.csv).\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nS3_COST_CODES_PATH\n\nDescription: Path to a cost codes CSV file stored in an S3 bucket (e.g., COST_CENTRES.csv). Requires DOCUMENT_REDACTION_BUCKET to be set.\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nENFORCE_COST_CODES\n\nDescription: If set to 'True' and GET_COST_CODES is also enabled, makes the selection of a cost code mandatory for users.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "src/app_settings.html#whole-document-api-options",
    "href": "src/app_settings.html#whole-document-api-options",
    "title": "App settings management guide",
    "section": "Whole Document API Options",
    "text": "Whole Document API Options\nConfigurations for features related to processing whole documents via APIs, particularly AWS Textract for large documents.\n\nSHOW_WHOLE_DOCUMENT_TEXTRACT_CALL_OPTIONS\n\nDescription: Controls whether UI options for whole document Textract calls are displayed. (Note: Mentioned as not currently implemented in the source).\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nTEXTRACT_WHOLE_DOCUMENT_ANALYSIS_BUCKET\n\nDescription: The S3 bucket used for input and output of whole document analysis with AWS Textract.\nDefault Value: '' (empty string)\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nTEXTRACT_WHOLE_DOCUMENT_ANALYSIS_INPUT_SUBFOLDER\n\nDescription: The subfolder within TEXTRACT_WHOLE_DOCUMENT_ANALYSIS_BUCKET where input documents for Textract analysis are placed.\nDefault Value: 'input'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nTEXTRACT_WHOLE_DOCUMENT_ANALYSIS_OUTPUT_SUBFOLDER\n\nDescription: The subfolder within TEXTRACT_WHOLE_DOCUMENT_ANALYSIS_BUCKET where output results from Textract analysis are stored.\nDefault Value: 'output'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nLOAD_PREVIOUS_TEXTRACT_JOBS_S3\n\nDescription: If set to 'True', the application will attempt to load data from previous Textract jobs stored in S3.\nDefault Value: 'False'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nTEXTRACT_JOBS_S3_LOC\n\nDescription: The S3 subfolder (within TEXTRACT_WHOLE_DOCUMENT_ANALYSIS_BUCKET) where Textract job data (output) is stored.\nDefault Value: 'output'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nTEXTRACT_JOBS_S3_INPUT_LOC\n\nDescription: The S3 subfolder (within TEXTRACT_WHOLE_DOCUMENT_ANALYSIS_BUCKET) where Textract job input is stored.\nDefault Value: 'input'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env (or config/aws_config.env if AWS_CONFIG_PATH is configured).\n\nTEXTRACT_JOBS_LOCAL_LOC\n\nDescription: The local subfolder where Textract job data is stored if not using S3 or as a cache.\nDefault Value: 'output'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env.\n\nDAYS_TO_DISPLAY_WHOLE_DOCUMENT_JOBS\n\nDescription: Specifies the number of past days for which to display whole document Textract jobs in the UI.\nDefault Value: '7'\nConfiguration: Set as an environment variable directly, or include in config/app_config.env."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "version: 0.7.0\nWelcome to the Document Redaction App documentation. This site provides comprehensive documentation for the Document Redaction App.\nNavigate through the sections to learn how to install, use, and manage the application. Below is a brief introduction to the app."
  },
  {
    "objectID": "index.html#document-redaction",
    "href": "index.html#document-redaction",
    "title": "Home",
    "section": "Document redaction",
    "text": "Document redaction\nRedact personally identifiable information (PII) from documents (pdf, images), open text, or tabular data (xlsx/csv/parquet). Please see the User Guide for a walkthrough on how to use the app.\n\n\n\nHandwriting and signatures redacted example\n\n\nTo identify text in documents, the app provides several options. ‘Local’ text/OCR image analysis uses spacy/tesseract, and works quite well for documents with typed text. If available, choose ‘AWS Textract service’ to redact more complex elements e.g. signatures or handwriting. The app then identifies personal information to redaction. The ‘Local’ is based on spaCy, is quick and gives good results if you are primarily looking for a custom list of terms to redact (see Redaction settings). If available, AWS Comprehend gives better results at a small cost.\nAfter redaction, suggested redactions can be reviewed and modified on the ‘Review redactions’ tab. The original pdf can be uploaded here alongside a ‘…redaction_file.csv’ to continue a previous redaction/review task. See the ‘Redaction settings’ tab to choose which pages to redact, the type of information to redact (e.g. people, places), or custom terms to always include/ exclude from redaction.\nNOTE: The app is not 100% accurate, and it will miss some personal information. It is essential that all outputs are reviewed by a human before using the final outputs."
  },
  {
    "objectID": "src/faq.html",
    "href": "src/faq.html",
    "title": "User FAQ",
    "section": "",
    "text": "Read the User Guide: Many common questions are addressed in the detailed User Guide sections.\nStart Simple: If you’re new, try redacting with default options first before customising extensively.\nHuman Review is Key: Always manually review the ...redacted.pdf or use the ‘Review redactions’ tab. No automated system is perfect.\nSave Incrementally: When working on the ‘Review redactions’ tab, use the ‘Save changes on current page to file’ button periodically, especially for large documents."
  },
  {
    "objectID": "src/faq.html#general-advice",
    "href": "src/faq.html#general-advice",
    "title": "User FAQ",
    "section": "",
    "text": "Read the User Guide: Many common questions are addressed in the detailed User Guide sections.\nStart Simple: If you’re new, try redacting with default options first before customising extensively.\nHuman Review is Key: Always manually review the ...redacted.pdf or use the ‘Review redactions’ tab. No automated system is perfect.\nSave Incrementally: When working on the ‘Review redactions’ tab, use the ‘Save changes on current page to file’ button periodically, especially for large documents."
  },
  {
    "objectID": "src/faq.html#general-questions",
    "href": "src/faq.html#general-questions",
    "title": "User FAQ",
    "section": "General questions",
    "text": "General questions\n\nWhat is document redaction and what does this app do?\nDocument redaction is the process of removing sensitive or personally identifiable information (PII) from documents. This application is a tool that automates this process for various document types, including PDFs, images, open text, and tabular data (XLSX/CSV/Parquet). It identifies potential PII using different methods and allows users to review, modify, and export the suggested redactions.\n\n\nWhat types of documents and data can be redacted?\nThe app can handle a variety of formats. For documents, it supports PDFs and images (JPG, PNG). For tabular data, it works with XLSX, CSV, and Parquet files. Additionally, it can redact open text that is copied and pasted directly into the application interface.\n\n\nHow does the app identify text and PII for redaction?\nThe app employs several methods for text extraction and PII identification. Text can be extracted directly from selectable PDF text, using a local Optical Character Recognition (OCR) model for image-based content, or through the AWS Textract service for more complex documents, handwriting, and signatures (if available). For PII identification, it can use a local model based on the spacy package or the AWS Comprehend service for more accurate results (if available).\n\n\nCan I customise what information is redacted?\nYes, the app offers extensive customisation options. You can define terms that should never be redacted (an ‘allow list’), terms that should always be redacted (a ‘deny list’), and specify entire pages to be fully redacted using CSV files. You can also select specific types of entities to redact, such as dates, or remove default entity types that are not relevant to your needs.\n\n\nHow can I review and modify the suggested redactions?\nThe app provides a dedicated ‘Review redactions’ tab with a visual interface. You can upload the original document and the generated review file (CSV) to see the suggested redactions overlaid on the document. Here, you can move, resize, delete, and add new redaction boxes. You can also filter suggested redactions based on criteria and exclude them individually or in groups.\n\n\nCan I work with tabular data or copy and pasted text?\nYes, the app has a dedicated tab for redacting tabular data files (XLSX/CSV) and open text. For tabular data, you can upload your file and select which columns to redact. For open text, you can simply paste the text into a box. You can then choose the redaction method and the desired output format for the anonymised data.\n\n\nWhat are the options for the anonymisation format of redacted text?\nWhen redacting tabular data or open text, you have several options for how the redacted information is replaced. The default is to replace the text with ‘REDACTED’. Other options include replacing it with the entity type (e.g., ‘PERSON’), redacting completely (removing the text), replacing it with a consistent hash value, or masking it with stars (’*’).\n\n\nCan I export or import redactions to/from other software like Adobe Acrobat?\nYes, the app supports exporting and importing redaction data using the Adobe Acrobat comment file format (.xfdf). You can export suggested redactions from the app to an .xfdf file that can be opened in Adobe. Conversely, you can import an .xfdf file created in Adobe into the app to generate a review file (CSV) for further work within the application."
  },
  {
    "objectID": "src/faq.html#troubleshooting",
    "href": "src/faq.html#troubleshooting",
    "title": "User FAQ",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nQ1: The app missed some personal information or redacted things it shouldn’t have. Is it broken?\nA: Not necessarily. The app is not 100% accurate and is designed as an aid. The README explicitly states: “NOTE: The app is not 100% accurate, and it will miss some personal information. It is essential that all outputs are reviewed by a human before using the final outputs.” * Solution: Always use the ‘Review redactions’ tab to manually inspect, add, remove, or modify redactions.\n\n\nQ2: I uploaded a PDF, but no text was found, or redactions are very poor using the ‘Local model - selectable text’ option.\nA: This option only works if your PDF has actual selectable text. If your PDF is an image scan (even if it looks like text), this method won’t work well. * Solution: * Try the ‘Local OCR model - PDFs without selectable text’ option. This uses Tesseract OCR to “read” the text from images. * For best results, especially with complex documents, handwriting, or signatures, use the ‘AWS Textract service - all PDF types’ if available.\n\n\nQ3: Handwriting or signatures are not being redacted properly.\nA: The ‘Local’ text/OCR methods (selectable text or Tesseract) struggle with handwriting and signatures. * Solution: * Use the ‘AWS Textract service’ for text extraction. * Ensure that on the main ‘Redact PDFs/images’ tab, under “Optional - select signature extraction” (when AWS Textract is chosen), you have enabled handwriting and/or signature detection. Note that signature detection has higher cost implications.\n\n\nQ4: The options for ‘AWS Textract service’ or ‘AWS Comprehend’ are missing or greyed out.\nA: These services are typically only available when the app is running in an AWS environment or has been specifically configured by your system admin to access these services (e.g., via API keys). * Solution: * Check if your instance of the app is supposed to have AWS services enabled. * If running outside AWS, see the “Using AWS Textract and Comprehend when not running in an AWS environment” section in the advanced guide. This involves configuring AWS access keys, which should be done with IT and data security approval.\n\n\nQ5: I re-processed the same document, and it seems to be taking a long time and potentially costing more with AWS services. Can I avoid this?\nA: Yes. If you have previously processed a document with AWS Textract or the Local OCR model, the app generates a .json output file (..._textract.json or ..._ocr_results_with_words.json). * Solution: When re-uploading your original document for redaction, also upload the corresponding .json file. The app should detect this (the “Existing Textract output file found” box may be checked), skipping the expensive text extraction step.\n\n\nQ6: My app crashed, or I reloaded the page. Are my output files lost?\nA: If you are logged in via AWS Cognito and the server hasn’t been shut down, you might be able to recover them. * Solution: Go to the ‘Redaction settings’ tab, scroll to the bottom, and look for ‘View all output files from this session’.\n\n\nQ7: My custom allow list (terms to never redact) or deny list (terms to always redact) isn’t working.\nA: There are a few common reasons: * File Format: Ensure your list is a .csv file with terms in the first column only, with no column header. * Case Sensitivity: Terms in the allow/deny list are case sensitive. * Deny List & ‘CUSTOM’ Entity: For a deny list to work, you must select the ‘CUSTOM’ entity type in ‘Redaction settings’ under ‘Entities to redact’. * Manual Additions: If you manually added terms in the app interface (under ‘Manually modify custom allow…’), ensure you pressed Enter after typing each term in its cell. * Fuzzy Search for Deny List: If you intend to use fuzzy matching for your deny list, ensure ‘CUSTOM_FUZZY’ is selected as an entity type, and you’ve configured the “maximum number of spelling mistakes allowed.”\n\n\nQ8: I’m trying to review redactions, but the PDF in the viewer looks like it’s already redacted with black boxes.\nA: You likely uploaded the ...redacted.pdf file instead of the original document. * Solution: On the ‘Review redactions’ tab, ensure you upload the original, unredacted PDF alongside the ..._review_file.csv.\n\n\nQ9: I can’t move or pan the document in the ‘Review redactions’ viewer when zoomed in.\nA: You are likely in “add redaction boxes” mode. * Solution: Scroll to the bottom of the document viewer pane and click the hand icon. This switches to “modify mode,” allowing you to pan the document by clicking and dragging, and also to move/resize existing redaction boxes.\n\n\nQ10: I accidentally clicked “Exclude all items in table from redactions” on the ‘Review redactions’ tab without filtering, and now all my redactions are gone!\nA: This can happen if you don’t apply a filter first. * Solution: Click the ‘Undo last element removal’ button immediately. This should restore the redactions. Always ensure you have clicked the blue tick icon next to the search box to apply your filter before using “Exclude all items…”.\n\n\nQ11: Redaction of my CSV or XLSX file isn’t working correctly.\nA: The app expects a specific format for tabular data. * Solution: Ensure your data file has a simple table format, with the table starting in the first cell (A1). There should be no other information or multiple tables within the sheet you intend to redact. For XLSX files, each sheet to be redacted must follow this format.\n\n\nQ12: The “Identify duplicate pages” feature isn’t finding duplicates I expect, or it’s flagging too many pages.\nA: This feature uses text similarity based on the ocr_outputs.csv files and has a default similarity threshold (e.g., 90%). * Solution: * Ensure you’ve uploaded the correct ocr_outputs.csv files for all documents you’re comparing. * Review the page_similarity_results.csv output to see the similarity scores. The 90% threshold might be too high or too low for your specific documents. The current version of the app described doesn’t seem to allow changing this threshold in the UI, so you’d mainly use the output to inform your manual review.\n\n\nQ13: I exported a review file to Adobe (.xfdf), but when I open it in Adobe Acrobat, it can’t find the PDF or shows no redactions.\nA: When Adobe Acrobat prompts you, it needs to be pointed to the exact original PDF. * Solution: Ensure you select the original, unredacted PDF file that was used to generate the ..._review_file.csv (and subsequently the .xfdf file) when Adobe Acrobat asks for the associated document.\n\n\nQ14: My AWS Textract API job (submitted via “Submit whole document to AWS Textract API…”) is taking a long time, or I don’t know if it’s finished.\nA: Large documents can take time. The document estimates about five seconds per page as a rough guide. * Solution: * After submitting, a Job ID will appear. * Periodically click the ‘Check status of Textract job and download’ button. Processing continues in the background. * Once ready, the _textract.json output will appear in the output area.\n\n\nQ15: I’m trying to redact specific terms from my deny list, but they are not being picked up, even though the ‘CUSTOM’ entity is selected.\nA: The deny list matches whole words with exact spelling by default. * Solution: * Double-check the spelling and case in your deny list. * If you expect misspellings to be caught, you need to use the ‘CUSTOM_FUZZY’ entity type and configure the “maximum number of spelling mistakes allowed” under ‘Redaction settings’. Then, upload your deny list.\n\n\nQ16: I set the “Lowest page to redact” and “Highest page to redact” in ‘Redaction settings’, but the app still seems to process or show redactions outside this range.\nA: The page range setting primarily controls which pages have redactions applied in the final ...redacted.pdf. The underlying text extraction (especially with OCR/Textract) might still process the whole document to generate the ...ocr_results.csv or ..._textract.json. When reviewing, the review_file.csv might initially contain all potential redactions found across the document. * Solution: * Ensure the ...redacted.pdf correctly reflects the page range. * When reviewing, use the page navigation and filters on the ‘Review redactions’ tab to focus on your desired page range. The final application of redactions from the review tab should also respect the range if it’s still set, but primarily it works off the review_file.csv.\n\n\nQ17: My “Full page redaction list” isn’t working. I uploaded a CSV with page numbers, but those pages aren’t blacked out.\nA: Common issues include: * File Format: Ensure your list is a .csv file with page numbers in the first column only, with no column header. Each page number should be on a new row. * Redaction Task: Simply uploading the list doesn’t automatically redact. You need to: 1. Upload the PDF you want to redact. 2. Upload the full page redaction CSV in ‘Redaction settings’. 3. It’s often best to deselect all other entity types in ‘Redaction settings’ if you only want to redact these full pages. 4. Run the ‘Redact document’ process. The output ...redacted.pdf should show the full pages redacted, and the ...review_file.csv will list these pages.\n\n\nQ18: I merged multiple ...review_file.csv files, but the output seems to have duplicate redaction boxes or some are missing.\nA: The merge feature simply combines all rows from the input review files. * Solution: * Duplicates: If the same redaction (same location, text, label) was present in multiple input files, it will appear multiple times in the merged file. You’ll need to manually remove these duplicates on the ‘Review redactions’ tab or by editing the merged ...review_file.csv in a spreadsheet editor before review. * Missing: Double-check that all intended ...review_file.csv files were correctly uploaded for the merge. Ensure the files themselves contained the expected redactions.\n\n\nQ19: I imported an .xfdf Adobe comment file, but the review_file.csv generated doesn’t accurately reflect the highlights or comments I made in Adobe Acrobat.\nA: The app converts Adobe’s comment/highlight information into its review_file format. Discrepancies can occur if: * Comment Types: The app primarily looks for highlight-style annotations that it can interpret as redaction areas. Other Adobe comment types (e.g., sticky notes without highlights, text strike-throughs not intended as redactions) might not translate. * Complexity: Very complex or unusually shaped Adobe annotations might not convert perfectly. * PDF Version: Ensure the PDF uploaded alongside the .xfdf is the exact same original, unredacted PDF that the comments were made on in Adobe. * Solution: After import, always open the generated review_file.csv (with the original PDF) on the ‘Review redactions’ tab to verify and adjust as needed.\n\n\nQ20: The Textract API job status table (under “Submit whole document to AWS Textract API…”) only shows recent jobs, or I can’t find an older Job ID I submitted.\nA: The table showing Textract job statuses might have a limit or only show jobs from the current session or within a certain timeframe (e.g., “up to seven days old” is mentioned). * Solution: * It’s good practice to note down the Job ID immediately after submission if you plan to check it much later. * If the _textract.json file was successfully created from a previous job, you can re-upload that .json file with your original PDF to bypass the API call and proceed directly to redaction or OCR conversion.\n\n\nQ21: I edited a ...review_file.csv in Excel (e.g., changed coordinates, labels, colors), but when I upload it to the ‘Review redactions’ tab, the boxes are misplaced, the wrong color, or it causes errors.\nA: The review_file.csv has specific columns and data formats (e.g., coordinates, RGB color tuples like (0,0,255)). * Solution: * Coordinates (xmin, ymin, xmax, ymax): Ensure these are numeric and make sense for PDF coordinates. Drastic incorrect changes can misplace boxes. * Colors: Ensure the color column uses the (R,G,B) format, e.g., (0,0,255) for blue, not hex codes or color names, unless the app specifically handles that (the guide mentions RGB). * CSV Integrity: Ensure you save the file strictly as a CSV. Excel sometimes adds extra formatting or changes delimiters if not saved carefully. * Column Order: Do not change the order of columns in the review_file.csv. * Test Small Changes: Modify one or two rows/values first to see the effect before making bulk changes.\n\n\nQ22: The cost and time estimation feature isn’t showing up, or it’s giving unexpected results.\nA: This feature depends on admin configuration and certain conditions. * Solution: * Admin Enabled: Confirm with your system admin that the cost/time estimation feature is enabled in the app’s configuration. * AWS Services: Estimation is typically most relevant when using AWS Textract or Comprehend. If you’re only using ‘Local’ models, the estimation might be simpler or not show AWS-related costs. * Existing Output: If “Existing Textract output file found” is checked (because you uploaded a pre-existing _textract.json), the estimated cost and time should be significantly lower for the Textract part of the process.\n\n\nQ23: I’m prompted for a “cost code,” but I don’t know what to enter, or my search isn’t finding it.\nA: Cost code selection is an optional feature enabled by system admins for tracking AWS usage. * Solution: * Contact Admin/Team: If you’re unsure which cost code to use, consult your team lead or the system administrator who manages the redaction app. They should provide the correct code or guidance. * Search Tips: Try searching by project name, department, or any known identifiers for your cost center. The search might be case-sensitive or require exact phrasing.\n\n\nQ24: I selected “hash” as the anonymisation output format for my tabular data, but the output still shows “REDACTED” or something else.\nA: Ensure the selection was correctly registered before redacting. * Solution: * Double-check on the ‘Open text or Excel/csv files’ tab, under ‘Anonymisation output format,’ that “hash” (or your desired format) is indeed selected. * Try re-selecting it and then click ‘Redact text/data files’ again. * If the issue persists, it might be a bug or a specific interaction with your data type that prevents hashing. Report this to your app administrator. “Hash” should replace PII with a consistent unique ID for each unique piece of PII.\n\n\nQ25: I’m using ‘CUSTOM_FUZZY’ for my deny list. I have “Should fuzzy search match on entire phrases in deny list” checked, but it’s still matching individual words within my phrases or matching things I don’t expect.\nA: Fuzzy matching on entire phrases can be complex. The “maximum number of spelling mistakes allowed” applies to the entire phrase. * Solution: * Mistake Count: If your phrase is long and the allowed mistakes are few, it might not find matches if the errors are distributed. Conversely, too many allowed mistakes on a short phrase can lead to over-matching. Experiment with the mistake count. * Specificity: If “match on entire phrases” is unchecked, it will fuzzy match each individual word (excluding stop words) in your deny list phrases. This can be very broad. Ensure this option is set according to your needs. * Test with Simple Phrases: Try a very simple phrase with a known, small number of errors to see if the core fuzzy logic is working as you expect, then build up complexity.\n\n\nQ26: I “locked in” a new redaction box format on the ‘Review redactions’ tab (label, colour), but now I want to change it or go back to the pop-up for each new box.\nA: When a format is locked, a new icon (described as looking like a “gift tag”) appears at the bottom of the document viewer. * Solution: * Click the “gift tag” icon at the bottom of the document viewer pane. * This will allow you to change the default locked format. * To go back to the pop-up appearing for each new box, click the lock icon within that “gift tag” menu again to “unlock” it (it should turn from blue to its original state).\n\n\nQ27: I clicked “Redact document,” processing seemed to complete (e.g., progress bar finished, “complete” message shown), but no output files (...redacted.pdf, ...review_file.csv) appeared in the output area.\nA: This could be due to various reasons: * No PII Found: If absolutely no PII was detected according to your settings (entities, allow/deny lists), the app might not generate a ...redacted.pdf if there’s nothing to redact, though a review_file.csv (potentially empty) and ocr_results.csv should still ideally appear. * Error During File Generation: An unhandled error might have occurred silently during the final file creation step. * Browser/UI Issue: The UI might not have refreshed to show the files. * Permissions: In rare cases, if running locally, there might be file system permission issues preventing the app from writing outputs. * Solution: * Try refreshing the browser page (if feasible without losing input data, or after re-uploading). * Check the ‘Redaction settings’ tab for ‘View all output files from this session’ (if logged in via Cognito) – they might be listed there. * Try a very simple document with obvious PII and default settings to see if any output is generated. * Check browser developer console (F12) for any error messages.\n\n\nQ28: When reviewing, I click on a row in the ‘Search suggested redactions’ table. The page changes, but the specific redaction box isn’t highlighted, or the view doesn’t scroll to it.\nA: The highlighting feature (“should change the colour of redaction box to blue”) is an aid. * Solution: * Ensure you are on the correct page. The table click should take you there. * The highlighting might be subtle or conflict with other UI elements. Manually scan the page for the text/label mentioned in the table row. * Scrolling to the exact box isn’t explicitly guaranteed, especially on very dense pages. The main function is page navigation.\n\n\nQ29: I rotated a page in the ‘Review redactions’ document viewer, and now all subsequent pages are also rotated, or if I navigate away and back, the rotation is lost.\nA: The README states: “When you switch page, the viewer will stay in your selected orientation, so if it looks strange, just rotate the page again and hopefully it will look correct!” * Solution: * The rotation is a viewing aid for the current page session in the viewer. It does not permanently alter the original PDF. * If subsequent pages appear incorrectly rotated, use the rotation buttons again for that new page. * The rotation state might reset if you reload files or perform certain actions. Simply re-apply rotation as needed for viewing."
  },
  {
    "objectID": "src/management_guide.html",
    "href": "src/management_guide.html",
    "title": "User and AWS instance management guide",
    "section": "",
    "text": "This guide gives an overview of how to manage users of the redaction app, and how to start, stop, and manage instances of the app running on AWS Cloud."
  },
  {
    "objectID": "src/management_guide.html#managing-users-in-aws-cognito-user-pools",
    "href": "src/management_guide.html#managing-users-in-aws-cognito-user-pools",
    "title": "User and AWS instance management guide",
    "section": "Managing Users in AWS Cognito User Pools",
    "text": "Managing Users in AWS Cognito User Pools\nAWS Cognito User Pools provide a secure and scalable user directory for your applications. This guide focuses on common administrative tasks within the AWS Management Console.\n\nAccessing Your User Pool\n\nLog in to the AWS Management Console.\nNavigate to Cognito (you can use the search bar).\nIn the left navigation pane, select User Pools.\nClick on the name of the user pool associated with your redaction app.\n\n\n\nCreating Users\nCreating a new user in Cognito involves setting their initial credentials and attributes.\n\nFrom your User Pool’s dashboard, click on the Users tab.\nClick the Create user button.\nUsername: Enter a unique username for the user. This is what they will use to log in.\nTemporary password:\n\nSelect Generate a password to have Cognito create a strong, temporary password.\nAlternatively, you can choose Set a password and enter one manually. If you do this, ensure it meets the password policy configured for your user pool.\nImportant: Cognito will typically require users to change this temporary password upon their first login.\n\nEmail: Enter the user’s email address. This is crucial for communication and potentially for password recovery if configured.\nPhone number (optional): The phone number is not needed for login or user management in this app, you can leave this blank.\nMark email as verified/Mark phone number as verified: For new users, you can choose to automatically verify their email and/or phone number. If unchecked, the user might need to verify these themselves during the signup process (depending on your User Pool’s verification settings).\nGroups (optional): If you have defined groups in your user pool, you can add the user to relevant groups here. Groups are useful for managing permissions and access control within your application.\nClick Create user.\n\n\n\nInformation to Give to Users to Sign Up\nOnce a user is created, they’ll need specific information to access the application.\n\nApplication URL: The web address of your redaction app’s login page.\nUsername: The username you created for them in Cognito.\nTemporary Password: The temporary password you generated or set.\nInstructions for First Login:\n\n“Upon your first login, you will be prompted to change your temporary password to a new, secure password.”\n“You will also need to set up Two-Factor Authentication using a phone authenticator app (e.g., Google Authenticator, Authy).”\n\n\n\n\nResetting User Access (Password Reset)\nIf a user forgets their password or needs their access reset, you can do this in the console.\n\nFrom your User Pool’s dashboard, click on the Users tab.\nLocate the user you wish to reset. You can use the search bar.\nClick on the user’s username.\nOn the user details page, click the Reset password button.\nCognito will generate a new temporary password and mark the user to change it on next login.\nImportant: You will need to communicate this new temporary password to the user securely.\n\n\n\nTwo-Factor Authentication (2FA) with Apps Only\nYour application uses phone app-based 2FA. This section covers what administrators need to know.\n\nHow it Works for the User\nWhen a user logs in for the first time or when 2FA is enabled for their account, they will be prompted to set up 2FA. This typically involves:\n\nScanning a QR Code: The application will display a QR code.\nUsing an Authenticator App: The user opens their authenticator app (e.g., Google Authenticator, Authy, Microsoft Authenticator) and scans the QR code.\nEntering a Code: The authenticator app will generate a time-based one-time password (TOTP). The user enters this code into the application to verify the setup.\n\n\n\nAdministrator’s Role in 2FA\nAs an administrator, you generally don’t directly “set up” the user’s 2FA device in the console. The user performs this self-enrollment process within the application. However, you can manage the 2FA status of a user:\n\nEnabling/Disabling 2FA for a User:\n\nFrom your User Pool’s dashboard, click on the Users tab.\nClick on the user’s username.\nUnder the “Multi-factor authentication (MFA)” section, you’ll see the current MFA status.\nIf 2FA is not enabled, you might have the option to “Enable MFA” for the user. If your user pool requires 2FA, it might be automatically enabled upon signup.\nYou can also Disable MFA for a user if necessary. This will remove their registered 2FA device and they will no longer be prompted for a 2FA code during login until they re-enroll.\n\nRemoving a User’s 2FA Device: If a user loses their phone or needs to re-configure 2FA, you can remove their existing MFA device.\n\nOn the user’s details page, under the “Multi-factor authentication (MFA)” section, you will see a list of registered MFA devices (if any).\nSelect the device and click Remove.\nThe next time the user logs in, they will be prompted to set up 2FA again.\n\n\n\n\n\nOther Useful Information for Administrators\n\nUser Status: In the “Users” tab, you’ll see the status of each user (e.g., CONFIRMED, UNCONFIRMED, FORCE_CHANGE_PASSWORD, ARCHIVED, COMPROMISED).\n\nCONFIRMED: User has confirmed their account and set their password.\nUNCONFIRMED: User has been created but hasn’t confirmed their account (e.g., through email verification) or changed their temporary password.\nFORCE_CHANGE_PASSWORD: User must change their password on next login.\n\nSearching and Filtering Users: The “Users” tab provides search and filtering options to quickly find specific users or groups of users.\nUser Attributes: You can view and sometimes edit user attributes (like email, phone number, custom attributes) on the user’s detail page.\nGroups:\n\nYou can create and manage groups under the Groups tab of your User Pool.\nGroups are useful for organising users and applying different permissions or configurations through AWS Identity and Access Management (IAM) roles.\n\nUser Pool Settings:\n\nExplore the various settings under the User Pool Properties tab (e.g., Policies, MFA and verifications, Message customisations).\nPolicies: Define password complexity requirements.\nMFA and verifications: Configure whether MFA is optional, required, or disabled, and the types of MFA allowed (SMS, TOTP). Ensure “Authenticator apps” is enabled for your setup.\nMessage customisations: Customise the email and SMS messages sent by Cognito (e.g., for verification codes, password resets).\n\nMonitoring and Logging:\n\nIntegrate your Cognito User Pool with AWS CloudWatch to monitor user activities and potential issues.\nEnable CloudTrail logging for Cognito to track API calls and administrative actions.\n\nSecurity Best Practices:\n\nAlways use strong, unique passwords for your AWS console login.\nEnable MFA for your AWS console login.\nRegularly review user access and permissions.\nEducate users on strong password practices and the importance of 2FA.\n\n\nBy understanding these features and following best practices, administrators can effectively manage users within their AWS Cognito User Pool, ensuring secure and smooth operation of their redaction application."
  },
  {
    "objectID": "src/management_guide.html#basic-service-task-management-in-aws-ecs-console",
    "href": "src/management_guide.html#basic-service-task-management-in-aws-ecs-console",
    "title": "User and AWS instance management guide",
    "section": "Basic Service Task Management in AWS ECS Console",
    "text": "Basic Service Task Management in AWS ECS Console\nAWS Elastic Container Service (ECS) allows you to run, stop, and manage Docker containers on a cluster. This guide focuses on managing your ECS services, which maintain a desired number of tasks (container instances).\n\nAccessing Your ECS Cluster and Services\n\nLog in to the AWS Management Console.\nNavigate to ECS (Elastic Container Service) (you can use the search bar).\nIn the left navigation pane, select Clusters.\nClick on the name of the ECS cluster where your redaction app’s service is running.\n\n\n\nUnderstanding Services and Tasks\nBefore we dive into management, let’s clarify key concepts:\n\nTask Definition: A blueprint for your application. It specifies the Docker image, CPU, memory, environment variables, port mappings, and other configurations for your containers.\nTask: An actual running instance of a task definition. It’s an individual container or a set of tightly coupled containers running together.\nService: A mechanism that allows you to run and maintain a specified number of identical tasks simultaneously in an ECS cluster. The service ensures that if a task fails or stops, it’s replaced. It also handles load balancing and scaling.\n\n\n\nSetting the Number of Running Tasks to 0 (Turning Everything Off)\nSetting the desired number of tasks to 0 for a service effectively “turns off” your application by stopping all its running containers.\n\nFrom your Cluster’s dashboard, click on the Services tab.\nLocate the service associated with your redaction app (e.g., redaction-app-service).\nSelect the service by checking the box next to its name.\nClick the Update button.\nOn the “Configure service” page, find the Number of tasks field.\nChange the value in this field to 0.\nScroll to the bottom and click Update service.\n\nWhat happens next:\n\nECS will begin terminating all running tasks associated with that service.\nThe “Running tasks” count for your service will gradually decrease to 0.\nYour application will become inaccessible as its containers are stopped.\n\nImportant Considerations:\n\nCost Savings: Setting tasks to 0 can save costs by stopping the consumption of compute resources (CPU, memory) for your containers.\nAssociated Resources: This action only stops the ECS tasks. It does not stop underlying EC2 instances (if using EC2 launch type), associated databases, load balancers, or other AWS resources. You’ll need to manage those separately if you want to completely shut down your environment.\nContainer Images: Your Docker images will still reside in Amazon ECR (or wherever you store them).\nDowntime: This action will cause immediate downtime for your application.\n\n\n\nTurning the Desired Number of Tasks On\nTo bring your application back online, you’ll set the desired number of tasks to your operational value (usually 1 or more).\n\nFrom your Cluster’s dashboard, click on the Services tab.\nLocate the service associated with your redaction app.\nSelect the service by checking the box next to its name.\nClick the Update button.\nOn the “Configure service” page, find the Number of tasks field.\nChange the value in this field to your desired number of running tasks (e.g., 1, 2, etc.).\nScroll to the bottom and click Update service.\n\nWhat happens next:\n\nECS will begin launching new tasks based on your service’s configuration and task definition.\nThe “Running tasks” count will increase until it reaches your desired number.\nOnce tasks are running and healthy (according to your health checks), your application should become accessible again.\n\nImportant Considerations:\n\nStartup Time: Allow some time for tasks to pull images, start containers, and pass health checks before your application is fully available.\nResource Availability: Ensure your ECS cluster has sufficient available resources (EC2 instances or Fargate capacity) to launch the desired number of tasks.\n\n\n\nForcing Redeployment\nForcing a redeployment is useful when you’ve updated your task definition (e.g., pushed a new Docker image, changed environment variables) but the service hasn’t automatically picked up the new version. It’s also useful for “restarting” a service.\n\nFrom your Cluster’s dashboard, click on the Services tab.\nLocate the service you want to redeploy.\nSelect the service by checking the box next to its name.\nClick the Update button.\nOn the “Configure service” page, scroll down to the Deployment options section.\nCheck the box next to Force new deployment.\nScroll to the bottom and click Update service.\n\nWhat happens next:\n\nECS will initiate a new deployment for your service.\nIt will launch new tasks using the latest active task definition revision associated with your service.\nExisting tasks will be drained and terminated according to your service’s deployment configuration (e.g., minimum healthy percent, maximum percent).\nThis process effectively replaces all running tasks with fresh instances.\n\nImportant Considerations:\n\nLatest Task Definition: Ensure you have activated the correct and latest task definition revision before forcing a new deployment if your intention is to deploy new code. You can update the task definition used by a service via the “Update” service flow.\nDowntime (minimal if configured correctly): If your service has a properly configured load balancer and healthy deployment settings (e.g., blue/green or rolling updates), forced redeployments should result in minimal to no downtime. ECS will bring up new tasks before shutting down old ones.\nTroubleshooting: If a deployment gets stuck or tasks fail to start, check the “Events” tab of your service for error messages. Also, check the CloudWatch logs for your tasks.\n\n\n\nOther Useful Information for Administrators\n\nService Events: On your service’s detail page, click the Events tab. This provides a chronological log of actions taken by the ECS service, such as task launches, stops, and scaling events. This is invaluable for troubleshooting.\nTasks Tab: On your service’s detail page, click the Tasks tab to see a list of all individual tasks running (or recently stopped) for that service. You can click on individual tasks to view their details, including logs, network configuration, and CPU/memory utilisation.\nLogs: For each task, you can often find a link to its CloudWatch Logs under the “Logs” section of the task details. This is critical for debugging application errors.\nMetrics: The Metrics tab on your service provides graphs for CPU utilisation, memory utilisation, and the number of running tasks, helping you monitor your service’s performance.\nDeployment Configuration: When updating a service, review the Deployment options section. This allows you to control how new deployments are rolled out (e.g., minimum healthy percent, maximum percent). Proper configuration here ensures minimal impact during updates.\nAuto Scaling (beyond basic management): For dynamic scaling based on demand, explore Service Auto Scaling. This allows ECS to automatically adjust the desired number of tasks up or down based on metrics like CPU utilisation or request count.\nTask Definitions: Before updating a service, you might need to create a new revision of your task definition if you’re deploying new code or configuration changes to your containers. You can find Task Definitions in the left navigation pane under ECS.\n\nBy mastering these basic service management operations in the AWS Console, administrators can effectively control the lifecycle of their ECS-based applications."
  }
]